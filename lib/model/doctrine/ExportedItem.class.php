<?php

/**
 * ExportedItem
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @package    sf_sandbox
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 6820 2009-11-30 17:27:49Z jwage $
 */
class ExportedItem extends BaseExportedItem
{
    public function isInvoiceable( $startDate, $endDate )
    {
        // Convert all Date time String to time() unix format
        $startDate = strtotime( $startDate );
        $endDate = strtotime( $endDate );

        // Read UICategory YAMl to identify the Invoiceable Category
        $invoiceableCategories = sfYaml::load( file_get_contents( sfConfig::get( 'sf_config_dir' ) . '/invoiceableCategory.yml' ) );
        $invoiceableCategoryIDs = array_keys( $invoiceableCategories['invoiceable']);
        
        // get the Current UI category ID
        $dateRangeInvoiceableCategories = Doctrine::getTable( 'ExportedItemHistory' )->createQuery( 'h' )
                ->where( 'exported_item_id = ? ', $this['id'] )
                ->andWhere( 'field = ? ', "ui_category_id" )
                ->andWhereIn( 'value', $invoiceableCategoryIDs )
                ->andWhere( 'DATE(created_at) BETWEEN ? AND ? ', array( date( 'Y-m-d', $startDate ), date( 'Y-m-d', $endDate ) ) )
                ->orderBy( 'created_at DESC' )
                ->limit(1)
                ->fetchOne( array(), Doctrine_core::HYDRATE_ARRAY );

        // If none found, Return false rightaway. no need to check for past
        if( !is_array( $dateRangeInvoiceableCategories ) || empty( $dateRangeInvoiceableCategories ) )
        {
            return false;
        }
        
        // at this point, This record IS Invoiceable.
        // When updated date is not within daterange, we will have to query History on or before the start_date to ensure that
        // this record was not invoiceable before start_date
        $pastInvoiceableCategories = Doctrine::getTable( 'ExportedItemHistory' )->createQuery( 'h' )
                ->where( 'exported_item_id = ? ', $this['id'] )
                ->andWhere( 'field = ? ', "ui_category_id" )
                ->andWhereIn( 'value', $invoiceableCategoryIDs )
                ->andWhere( 'DATE(created_at) < ? ', date( 'Y-m-d', $startDate ) )
                ->orderBy( 'created_at DESC' )
                ->limit(1)
                ->fetchOne( array(), Doctrine_core::HYDRATE_ARRAY );
        
        // Query did find a category that was invoiceable?
        if( is_array( $pastInvoiceableCategories ) && count( $pastInvoiceableCategories ) > 0 )
        {
            return false;
        }

        // true = ui_category modified between $startDate and $endDate && ui_category is now chargeable but was not before $startDate
        return true;
    }

    public function getUICategoryID()
    {
        $recordHistory = Doctrine::getTable( 'ExportedItemHistory' )->createQuery( 'h' )
                ->where( 'field = ?', "ui_category_id" )
                ->andWhere( 'exported_item_id = ? ', $this['id'] )
                ->orderBy( 'created_at DESC' )
                ->limit(1)
                ->fetchOne( array(), Doctrine_Core::HYDRATE_ARRAY);

        if( !is_array( $recordHistory ) || empty( $recordHistory ) )
        {
            return null;
        }

        return $recordHistory['value']; // return the value
        
    }

    /**
     * Get the Invoiceable UICategoryID, First Invoiceable category is the Invoiceable Category.
     */
    public function getInvoiceableUICategoryID()
    {
        $invoiceableCategories = sfYaml::load( file_get_contents( sfConfig::get( 'sf_config_dir' ) . '/invoiceableCategory.yml' ) );
        $invoiceableCategoryIDs = array_keys( $invoiceableCategories['invoiceable']);
        
        $q = Doctrine::getTable( 'ExportedItemHistory' )->createQuery( 'h' )
                ->where( 'field = ?', "ui_category_id" )
                ->andWhereIn( 'value', $invoiceableCategoryIDs )
                ->andWhere( 'exported_item_id = ? ', $this['id'])
                ->orderBy( 'created_at ASC' )
                ->limit( 1 );
        $historyItem = $q->execute( array(), Doctrine_Core::HYDRATE_ARRAY );

        if( is_array( $historyItem ) && count( $historyItem ) >  0 )
        {
            return $historyItem[0]['value'];
        }

        return null;
    }

}

class ExportedItemException extends Exception{}