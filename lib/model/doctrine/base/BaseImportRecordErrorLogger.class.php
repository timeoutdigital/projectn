<?php
// Connection Component Binding
Doctrine_Manager::getInstance()->bindComponent('ImportRecordErrorLogger', 'project_n');

/**
 * BaseImportRecordErrorLogger
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property string $model
 * @property string $exception_class
 * @property string $trace
 * @property string $message
 * @property string $log
 * @property string $serialized_object
 * @property boolean $resolved
 * @property integer $import_logger_id
 * @property ImportLogger $ImportLogger
 * 
 * @method string                  getModel()             Returns the current record's "model" value
 * @method string                  getExceptionClass()    Returns the current record's "exception_class" value
 * @method string                  getTrace()             Returns the current record's "trace" value
 * @method string                  getMessage()           Returns the current record's "message" value
 * @method string                  getLog()               Returns the current record's "log" value
 * @method string                  getSerializedObject()  Returns the current record's "serialized_object" value
 * @method boolean                 getResolved()          Returns the current record's "resolved" value
 * @method integer                 getImportLoggerId()    Returns the current record's "import_logger_id" value
 * @method ImportLogger            getImportLogger()      Returns the current record's "ImportLogger" value
 * @method ImportRecordErrorLogger setModel()             Sets the current record's "model" value
 * @method ImportRecordErrorLogger setExceptionClass()    Sets the current record's "exception_class" value
 * @method ImportRecordErrorLogger setTrace()             Sets the current record's "trace" value
 * @method ImportRecordErrorLogger setMessage()           Sets the current record's "message" value
 * @method ImportRecordErrorLogger setLog()               Sets the current record's "log" value
 * @method ImportRecordErrorLogger setSerializedObject()  Sets the current record's "serialized_object" value
 * @method ImportRecordErrorLogger setResolved()          Sets the current record's "resolved" value
 * @method ImportRecordErrorLogger setImportLoggerId()    Sets the current record's "import_logger_id" value
 * @method ImportRecordErrorLogger setImportLogger()      Sets the current record's "ImportLogger" value
 * 
 * @package    sf_sandbox
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 6820 2009-11-30 17:27:49Z jwage $
 */
abstract class BaseImportRecordErrorLogger extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('import_record_error_logger');
        $this->hasColumn('model', 'string', 50, array(
             'type' => 'string',
             'notnull' => true,
             'length' => '50',
             ));
        $this->hasColumn('exception_class', 'string', 255, array(
             'type' => 'string',
             'notnull' => true,
             'length' => '255',
             ));
        $this->hasColumn('trace', 'string', null, array(
             'type' => 'string',
             'notnull' => true,
             ));
        $this->hasColumn('message', 'string', null, array(
             'type' => 'string',
             'notnull' => true,
             ));
        $this->hasColumn('log', 'string', null, array(
             'type' => 'string',
             'notnull' => true,
             ));
        $this->hasColumn('serialized_object', 'string', null, array(
             'type' => 'string',
             'notnull' => false,
             ));
        $this->hasColumn('resolved', 'boolean', null, array(
             'type' => 'boolean',
             'notnull' => true,
             'default' => 0,
             ));
        $this->hasColumn('import_logger_id', 'integer', null, array(
             'type' => 'integer',
             'notnull' => true,
             ));


        $this->index('model_index', array(
             'fields' => 
             array(
              0 => 'model',
             ),
             ));
        $this->index('exception_class_index', array(
             'fields' => 
             array(
              0 => 'exception_class',
             ),
             ));
        $this->index('resolved_index', array(
             'fields' => 
             array(
              0 => 'resolved',
             ),
             ));
        $this->option('type', 'INNODB');
        $this->option('collate', 'utf8_unicode_ci');
        $this->option('charset', 'utf8');
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasOne('ImportLogger', array(
             'local' => 'import_logger_id',
             'foreign' => 'id'));

        $timestampable0 = new Doctrine_Template_Timestampable();
        $this->actAs($timestampable0);
    }
}