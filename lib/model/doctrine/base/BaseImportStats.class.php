<?php

/**
 * BaseImportStats
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $total_inserts
 * @property integer $total_updates
 * @property integer $vendor_id
 * @property Vendor $Vendor
 * 
 * @method integer     getTotalInserts()  Returns the current record's "total_inserts" value
 * @method integer     getTotalUpdates()  Returns the current record's "total_updates" value
 * @method integer     getVendorId()      Returns the current record's "vendor_id" value
 * @method Vendor      getVendor()        Returns the current record's "Vendor" value
 * @method ImportStats setTotalInserts()  Sets the current record's "total_inserts" value
 * @method ImportStats setTotalUpdates()  Sets the current record's "total_updates" value
 * @method ImportStats setVendorId()      Sets the current record's "vendor_id" value
 * @method ImportStats setVendor()        Sets the current record's "Vendor" value
 * 
 * @package    sf_sandbox
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 6820 2009-11-30 17:27:49Z jwage $
 */
abstract class BaseImportStats extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('import_stats');
        $this->hasColumn('total_inserts', 'integer', null, array(
             'type' => 'integer',
             'notnull' => true,
             ));
        $this->hasColumn('total_updates', 'integer', null, array(
             'type' => 'integer',
             'notnull' => true,
             ));
        $this->hasColumn('vendor_id', 'integer', null, array(
             'type' => 'integer',
             'notnull' => true,
             ));

        $this->option('type', 'INNODB');
        $this->option('collate', 'utf8_unicode_ci');
        $this->option('charset', 'utf8');
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasOne('Vendor', array(
             'local' => 'vendor_id',
             'foreign' => 'id'));

        $timestampable0 = new Doctrine_Template_Timestampable();
        $this->actAs($timestampable0);
    }
}