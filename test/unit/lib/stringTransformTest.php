<?php
require_once 'PHPUnit/Framework.php';

require_once dirname(__FILE__).'/../../../lib/stringTransform.class.php';

/**
 * Test class for stringTransform.
 * Generated by PHPUnit on 2010-01-27 at 15:40:53.
 */
class stringTransformTest extends PHPUnit_Framework_TestCase {
  /**
   * @var stringTransform
   */
  protected $object;

  /**
   * @var string test string
   */
  protected $input = 'chicken.fox email@address.com, email@address.c, email2@address.co.uk, some
                      text, 0983 3483 993 anotheremail@address.com, blurb@test,
                      @super.com
                      http://www.google.com/
                      www.google.ch/
                      google.com/home.html
                      http://www.google.com/home.html
                      www.google.com/home.html
                      google.com/home.htm
                      https://www.google.com/home.html
                      https://google.com
                      http://google.com/test/sub/folder/
                      http://google.com/?x=this
                      http://google.com?x=this
                      http://google.com?this
                      http://google.com#this
                      http://google.com/#this';

  /**
   * Sets up the fixture, for example, opens a network connection.
   * This method is called before a test is executed.
   */
  protected function setUp() {
  }

  /**
   * Tears down the fixture, for example, closes a network connection.
   * This method is called after a test is executed.
   */
  protected function tearDown() {
  }

  /**
   * @todo Implement testExtractEmailAddressesFromText().
   */
  public function testExtractEmailAddressesFromText() {
    
    $expectedOutput = array( 'email@address.com',
                             'email2@address.co.uk',
                             'anotheremail@address.com' );

    $emailAddressesArray = stringTransform::extractEmailAddressesFromText( $this->input );
    
    $this->assertEquals( $expectedOutput, $emailAddressesArray );
  }

  /**
   * @todo Implement testExtractUrlsFromText().
   */
  public function testExtractUrlsFromText() {

    $expectedOutput = array( 'chicken.fox',
                             'http://www.google.com/',
                             'www.google.ch/',
                             'google.com/home.html',
                             'http://www.google.com/home.html',
                             'www.google.com/home.html',
                             'google.com/home.htm',
                             'https://www.google.com/home.html',
                             'https://google.com',
                             'http://google.com/test/sub/folder/',
                             'http://google.com/?x=this',
                             'http://google.com?x=this',
                             'http://google.com?this',
                             'http://google.com#this',
                             'http://google.com/#this' );

    $urlArray = stringTransform::extractUrlsFromText( $this->input );
    
    $this->assertEquals( $expectedOutput, $urlArray );
  }

  /**
   * @todo Implement testExtractPhoneNumbersFromText().
   */
  public function testExtractPhoneNumbersFromText()
  {
  }

  /**
   * @todo Implement testFormatPhoneNumber().
   */
  public function testFormatPhoneNumber()
  {
  }

  /**
   * @todo Implement testFormatUrl().
   */
  public function testFormatUrl()
  {
  }

  /**
   * testFormatPriceRange
   */
  public function testFormatPriceRange()
  {
    setlocale(LC_MONETARY, 'en_GB.UTF-8');

    $this->assertEquals( '', stringTransform::formatPriceRange( '0', '0.00' ) );
    $this->assertEquals( '£ 1.00', stringTransform::formatPriceRange( '1', '0.00' ) );
    $this->assertEquals( 'between £ 1.00 and £ 5.00', stringTransform::formatPriceRange( '1', '5' ) );
    $this->assertEquals( 'between £ 1.50 and £ 3.00', stringTransform::formatPriceRange( '1.50', '3.00' ) );
    $this->assertEquals( '£ 1.50 - £ 3.00', stringTransform::formatPriceRange( '1.50', '3.00', 'short' ) );

    setlocale(LC_MONETARY, 'en_US.UTF-8');

    $this->assertEquals( '$1.50 - $3.00', stringTransform::formatPriceRange( '1.50', '3.00', 'short' ) );
  }

  /**
   * Test concatNonBlankStrings
   */
  public function testConcatNonBlankStrings()
  {
    $values = array( 'one', '', 'two', ' ', 'three' );
    $this->assertEquals( 'one, two, three', stringTransform::concatNonBlankStrings( ', ', $values ) );
  }
  
  /**
   * Test xml fixing
   */
  public function testCleanXML( )
  {
   $string = '
one

two

three
';
   $expected = 'onetwothree';
   
   $this->assertEquals( $expected, stringTransform::stripEmptyLines( $string ) );
  }
}
?>
