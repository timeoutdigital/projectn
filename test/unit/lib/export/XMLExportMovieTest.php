<?php
require_once 'PHPUnit/Framework.php';

require_once dirname(__FILE__).'/../../../../test/bootstrap/unit.php';
require_once dirname( __FILE__ ).'/../../bootstrap.php';

/**
 * Test class for XMLExportMovie.
 * Generated by PHPUnit on 2010-01-20 at 12:10:23.
 */
class XMLExportMovieTest extends PHPUnit_Framework_TestCase
{
  /**
   * @var XMLExportMovie
   */
  protected $object;

  protected $specialChars = '&<>\'"';

  protected $escapedSpecialChars;

  /**
   * Sets up the fixture, for example, opens a network connection.
   * This method is called before a test is executed.
   */
  protected function setUp()
  {
    ProjectN_Test_Unit_Factory::createSqliteMemoryDb();

    $vendor = new Vendor();
    $vendor->setCity('test');
    $vendor->setLanguage('english');
    $vendor->save();
    $this->vendor = $vendor;

    $poiCat = new PoiCategory();
    $poiCat->setName( 'test' );
    $poiCat->save();

    $poi = new Poi();
    $poi->setPoiName( 'test name' );
    $poi->setStreet( 'test street' );
    $poi->setHouseNo('12' );
    $poi->setZips('1234' );
    $poi->setCity( 'test town' );
    $poi->setDistrict( 'test district' );
    $poi->setCountry( 'test country' );
    $poi->setVendorPoiId( '123' );
    $poi->setLocalLanguage('en');
    $poi->setCountryCode( 'uk' );
    $poi->setLongitude( '0.1' );
    $poi->setLatitude( '0.2' );
    $poi->link( 'Vendor', array( 1 ) );
    $poi->link('PoiCategory', array( 1 ) );
    $poi->save();

    $poi2 = new Poi();
    $poi2->setPoiName( 'test name' );
    $poi2->setStreet( 'test street' );
    $poi2->setHouseNo('12' );
    $poi2->setZips('1234' );
    $poi2->setCity( 'test town' );
    $poi2->setDistrict( 'test district' );
    $poi2->setCountry( 'test country' );
    $poi2->setVendorPoiId( '123' );
    $poi2->setLocalLanguage('en');
    $poi2->setCountryCode( 'uk' );
    $poi2->setLongitude( '0.1' );
    $poi2->setLatitude( '0.2' );
    $poi2->link( 'Vendor', array( 1 ) );
    $poi2->link('PoiCategory', array( 1 ) );
    $poi2->save();

    $genre = new MovieGenre();
    $genre['genre'] = 'comedy';
    $genre->save();

    $genre = new MovieGenre();
    $genre['genre'] = 'horror';
    $genre->save();

    $movie = new Movie();
    $movie[ 'Vendor' ] = $vendor;
    $movie[ 'Poi' ] = $poi;
    $movie[ 'name' ] = 'test movie name';
    $movie[ 'plot' ] = 'test movie plot';
    $movie[ 'review' ] = 'test movie review';
    $movie[ 'url' ] = 'http://movies.co.uk';
    $movie[ 'rating' ] = '0.1';
    $movie[ 'age_rating' ] = 'oap';
    $movie[ 'utf_offset' ] = '-01:00:00';
    $movie->link( 'MovieGenres', array( 1, 2 ) );
    $movie->save();

    $property = new MovieProperty();
    $property[ 'lookup' ] = 'movie key 1';
    $property[ 'value' ] = 'movie value 1';
    $property->link( 'Movie', array( 1 ) );
    $property->save();

    $property2 = new MovieProperty();
    $property2[ 'lookup' ] = 'movie key 2';
    $property2[ 'value' ] = 'movie value 2';
    $property2->link( 'Movie', array( 1 ) );
    $property2->save();

    $movie2 = new Movie();
    $movie2[ 'Vendor' ] = $vendor;
    $movie2[ 'Poi' ] = $poi2;
    $movie2[ 'name' ] = 'test movie name';
    $movie2[ 'plot' ] = 'test movie plot';
    $movie2[ 'review' ] = 'test movie review';
    $movie2[ 'url' ] = 'http://movies.co.uk';
    $movie2[ 'rating' ] = '0.1';
    $movie2[ 'age_rating' ] = 'oap';
    $movie2[ 'utf_offset' ] = '-01:00:00';
    $movie2->link( 'MovieGenres', array( 1, 2 ) );
    $movie2->save();

    var_dump( '___'.count($movie[ 'MovieProperty' ]) );

    $this->destination = dirname( __FILE__ ) . '/../../export/movie/test.xml';
    $this->export = new XMLExportMovie( $this->vendor, $this->destination );

    $this->export->run();
    $this->xml = simplexml_load_file( $this->destination );

    $this->escapedSpecialChars = htmlspecialchars( $this->specialChars );
  }

  /**
   * Tears down the fixture, for example, closes a network connection.
   * This method is called after a test is executed.
   */
  protected function tearDown()
  {
    ProjectN_Test_Unit_Factory::destroySqliteMemoryDb();
  }

  /**
   * Test movie tag has correct attributes and children
   */
  public function testMovieTag()
  {
    $this->assertEquals( $this->vendor->getName(), (string) $this->xml['vendor'] );
    $this->assertRegExp( '/[0-9]{4}-[0-9]{2}-[0-9]{2}T[0-9]{2}:[0-9]{2}:[0-9]{2}/', (string) $this->xml['modified'] );
    
    $movieTag = $this->xml->movie[0];
    //movie@attributes
    $this->assertEquals( '187', (string) $movieTag['id'] );
    $this->assertRegExp( '/[0-9]{4}-[0-9]{2}-[0-9]{2}T[0-9]{2}:[0-9]{2}:[0-9]{2}/', (string) $movieTag['modified'] );
  
    //movie/name
    $this->assertEquals( 'test movie name', (string) $movieTag->name );

    $versionTag = $this->xml->movie[0]->version;
    //movie/version
    $this->assertEquals( 'en', (string) $versionTag['lang'] );
    
    //movie/version/name
    $this->assertEquals( 'test movie name', (string) $versionTag->name );

    //movie/version/genre
    $this->assertEquals( 'comedy', (string) $versionTag->genre[0] );
    $this->assertEquals( 'horror', (string) $versionTag->genre[1] );

    //movie/version/plot
    $this->assertEquals( 'test movie plot', (string) $versionTag->plot );

    //movie/version/review
    $this->assertEquals( 'test movie review', (string) $versionTag->review );

    //movie/version/url
    $this->assertEquals( 'http://movies.co.uk', (string) $versionTag->url );

    //movie/version/rating
    $this->assertEquals( '0.1', (string) $versionTag->rating );

    //movie/version/place
    $this->assertEquals( '1', (string) $versionTag->place['place-id'] );
    //test the second movie as well
    $this->assertEquals('2', (string) $this->xml->movie[1]->version->place['place-id']);
  }

  /**
   * check properties tags
   */
  public function testPropertyTags()
  {
    $properties = $this->xml->movie[0]->version->property;
    var_dump( $this->xml->movie[0]->version );
    $this->assertEquals( 'movie key 1', (string) $properties[0]['key'] );
    $this->assertEquals( 'movie value 1', (string) $properties[0] );
    $this->assertEquals( 'movie key 2', (string) $properties[1]['key'] );
    $this->assertEquals( 'movie value 2', (string) $properties[1] );
  }
}
?>
