<?php
require_once 'PHPUnit/Framework.php';
require_once dirname(__FILE__).'/../../../../test/bootstrap/unit.php';
require_once dirname( __FILE__ ).'/../../bootstrap.php';
spl_autoload_register(array('Doctrine', 'autoload'));


/**
 * Test class for XMLExportEvent.
 * Generated by PHPUnit on 2010-01-15 at 14:34:10.
 */
class XMLExportEventTest extends PHPUnit_Framework_TestCase {
  /**
   * @var XMLExportEvent
   */
  protected $export;

  protected $vendor;


  /**
   * Sets up the fixture, for example, opens a network connection.
   * This method is called before a test is executed.
   */
  protected function setUp()
  {
    ProjectN_Test_Unit_Factory::createSqliteMemoryDb();
    
    $vendor = new Vendor();
    $vendor->setCity('test');
    $vendor->setLanguage('english');
    $vendor->save();
    $this->vendor = $vendor;

    $poiCat = new PoiCategory();
    $poiCat->setName( 'test' );
    $poiCat->save();

    $poi = new Poi();
    $poi->setPoiName( 'test name' );
    $poi->setStreet( 'test street' );
    $poi->setHouseNo('12' );
    $poi->setZips('1234' );
    $poi->setCity( 'test town' );
    $poi->setDistrict( 'test district' );
    $poi->setCountry( 'test country' );
    $poi->setVendorPoiId( '123' );
    $poi->setLocalLanguage('en');
    $poi->setCountryCode( 'uk' );
    $poi->setLongitude( '0.1' );
    $poi->setLatitude( '0.2' );
    $poi->link( 'Vendor', 1 );
    $poi->link('PoiCategory', 1 );
    $poi->save();

    $eventCat = new EventCategory();
    $eventCat->setName( 'test' );
    $eventCat->save();

    $event = new Event();
    $event->setName( 'test event' );
    $event->link( 'Vendor', 1 );
    $event->link( 'EventCategory', 1 );
    $event->save();

    $occurrence = new EventOccurence();
    $occurrence->setStart( '2010-01-31 21:00:20' );
    $occurrence->setUtcOffset( '-05:00' );
    $occurrence->link( 'Event', 1 );
    $occurrence->link( 'Poi', 1 );
    $occurrence->save();


    $this->destination = dirname( __FILE__ ) . '/../../export/event/test.xml';
    $this->export = new XMLExportEvent( $this->vendor, $this->destination );

  }

  /**
   * Tears down the fixture, for example, closes a network connection.
   * This method is called after a test is executed.
   */
  protected function tearDown()
  {
    ProjectN_Test_Unit_Factory::destroySqliteMemoryDb();
  }


  /**
   * test generateXML() has vendor-events root tag with required attributes
   */
  public function testGenerateXMLHasEventWithRequiredAttribute()
  {
    $data = $this->export->getData();
    $xmlElement = $this->export->generateXML( $data );

    $this->assertTrue( $xmlElement instanceof SimpleXMLElement );

    //vendor-event
    $this->assertEquals( $this->vendor->getName(), (string) $xmlElement['vendor'] );
    $this->assertRegExp( '/[0-9]{4}-[0-9]{2}-[0-9]{2}T[0-9]{2}:[0-9]{2}:[0-9]{2}/', (string) $xmlElement['modified'] );
  }

  /**
   * test geneate if xml has at least one event with its required children
   */
  public function testGenerateXMLHasEventWithRequiredChildren()
  {
    $data = $this->export->getData();
    $xmlElement = $this->export->generateXML( $data );

    $events = $xmlElement->xpath( '/vendor-events/event' );
    $this->assertGreaterThan(0, count( $events ) );

    $firstEvent = $events[0];
    $this->assertStringStartsWith( 'veid_', (string) $firstEvent['veid'] );

    $this->assertRegExp( '/[0-9]{4}-[0-9]{2}-[0-9]{2}T[0-9]{2}:[0-9]{2}:[0-9]{2}/', (string) $firstEvent['modified'] );
 
  }

  /**
   * 
   *
   * @todo test htmlspecialchars
   */
  public function testGenerateXMLEventNameTag()
  {
    $data = $this->export->getData();
    $xmlElement = $this->export->generateXML( $data );

    $this->assertEquals( 1, count( $xmlElement->xpath( '/vendor-events/event[1]/name' ) ) );
    $name = (string) array_shift( $xmlElement->xpath( '/vendor-events/event[1]/name' ) );
    $this->assertEquals( 'test event', $name );
  }

  /**
   * @todo test htmlspecialchars
   */
  public function testGenerateXMLEventVersionNameTag()
  {
    $data = $this->export->getData();
    $xmlElement = $this->export->generateXML( $data );

    $langAttribute = (string) $xmlElement->event[0]->version['lang'];
    $this->assertEquals( 'en', $langAttribute );

    $name = (string) array_shift( $xmlElement->xpath( '/vendor-events/event[1]/version[1]/name' ) );
    $this->assertEquals( 'test event', $name );
  }

  /**
   *
   */
  public function testGenerateXMLEventShowtimes()
  {
    $data = $this->export->getData();
    $xmlElement = $this->export->generateXML( $data );

    $showtimes = (string) array_shift( $xmlElement->xpath( '/vendor-events/event[1]/showtimes' ) );
    $this->assertGreaterThan( 0, count( $showtimes ) );

    $place = array_shift( $xmlElement->xpath( '/vendor-events/event[1]/showtimes[1]/place' ) );
    $this->assertEquals( 'placeid', (string) $place['place-id'] );
  }

  /**
   * 
   */
  public function testGenerateXMLEventShowtimesOccurrence()
  {
    $data = $this->export->getData();
    $xmlElement = $this->export->generateXML( $data );

    $startDate = array_shift( $xmlElement->xpath( '/vendor-events/event[1]/showtimes[1]/place[1]/occurrence[1]/time/start_date' ) );
    $this->assertEquals( '2010-01-31 21:00:20', (string) $startDate );
    
    $utcOffset = array_shift( $xmlElement->xpath( '/vendor-events/event[1]/showtimes[1]/place[1]/occurrence[1]/time/utc_offset' ) );
    $this->assertEquals( '-05:00', (string) $utcOffset );
  }


}
?>
