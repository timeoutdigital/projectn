<?php
require_once 'PHPUnit/Framework.php';

require_once dirname(__FILE__).'/../../../../test/bootstrap/unit.php';
require_once dirname( __FILE__ ).'/../../bootstrap.php';


/**
 * Test class for XMLExportEvent.
 * Generated by PHPUnit on 2010-01-15 at 14:34:10.
 */
class XMLExportEventTest extends PHPUnit_Framework_TestCase
{
  /**
   * @var XMLExportEvent
   */
  protected $export;

  /**
   * @var Vendor
   */
  protected $vendor;

  /**
   * @var SimpleXMLElement
   */
  protected $xml;

  protected $specialChars = '&<>\'"';

  protected $escapedSpecialChars;

  /**
   * Sets up the fixture, for example, opens a network connection.
   * This method is called before a test is executed.
   */
  protected function setUp()
  {
    ProjectN_Test_Unit_Factory::createSqliteMemoryDb();
    
    $vendor = new Vendor();
    $vendor->setCity('test');
    $vendor->setLanguage('english');
    $vendor->save();
    $this->vendor = $vendor;

    $poiCat = new PoiCategory();
    $poiCat->setName( 'test' );
    $poiCat->save();

    $poi = new Poi();
    $poi->setPoiName( 'test name' );
    $poi->setStreet( 'test street' );
    $poi->setHouseNo('12' );
    $poi->setZips('1234' );
    $poi->setCity( 'test town' );
    $poi->setDistrict( 'test district' );
    $poi->setCountry( 'test country' );
    $poi->setVendorPoiId( '123' );
    $poi->setLocalLanguage('en');
    $poi->setCountryCode( 'uk' );
    $poi->setLongitude( '0.1' );
    $poi->setLatitude( '0.2' );
    $poi->link( 'Vendor', array( 1 ) );
    $poi->link('PoiCategory', array( 1 ) );
    $poi->save();

    $eventCat = new EventCategory();
    $eventCat->setName( 'test' );
    $eventCat->save();

    $eventCat = new EventCategory();
    $eventCat->setName( 'test2' );
    $eventCat->save();

    $eventCat = new EventCategory();
    $eventCat->setName( 'test3' );
    $eventCat->save();

    $event = new Event();
    $event->setName( 'test event' );
    $event->setVendorCategory( 'test vendor category' );
    $event->setShortDescription( 'test vendor short description' );
    $event->setDescription( 'test vendor description' );
    $event->setBookingUrl( 'test booking url' );
    $event->setUrl( 'test url' );
    $event->setPrice( 'test price' );
    $event->link( 'Vendor', array( 1 ) );
    $event->link( 'EventCategory', array( 1 ) );
    $event->save();

    $property = new EventProperty();
    $property['lookup'] = 'test key 1';
    $property['value'] = 'test value 1';
    $property->link( 'Event', array( 1 ) );
    $property->save();

    $property2 = new EventProperty();
    $property2['lookup'] = 'test key 2';
    $property2['value'] = 'test value 2';
    $property2->link( 'Event', array( 1 ) );
    $property2->save();

    $event2 = new Event();
    $event2->setName( 'test event2' . $this->specialChars );
    $event2->link( 'Vendor', array( 1 ) );
    $event2->link( 'EventCategory', 1 );
    $event2->link( 'EventCategory', 2 );
    $event2->link( 'EventCategory', 3 );
    $event2->save();

    $occurrence = new EventOccurence();
    $occurrence->setStart( '2010-01-31 21:00:20' );
    $occurrence->setEnd( '2010-01-31 22:30:00' );
    $occurrence->setUtcOffset( '-05:00:00' );
    $occurrence->link( 'Event', array( 1 ) );
    $occurrence->link( 'Poi', array( 1 ) );
    $occurrence->save();


    $this->destination = dirname( __FILE__ ) . '/../../export/event/test.xml';
    $this->export = new XMLExportEvent( $this->vendor, $this->destination );

    $this->export->run();
    $this->xml = simplexml_load_file( $this->destination );

    $this->escapedSpecialChars = htmlspecialchars( $this->specialChars );
  }

  /**
   * Tears down the fixture, for example, closes a network connection.
   * This method is called after a test is executed.
   */
  protected function tearDown()
  {
    ProjectN_Test_Unit_Factory::destroySqliteMemoryDb();
  }

  /**
   * test generateXML() has vendor-events root tag with required attributes
   */
  public function testGenerateXMLHasEventWithRequiredAttribute()
  {
    $this->assertTrue( $this->xml instanceof SimpleXMLElement );

    //vendor-event
    $this->assertEquals( $this->vendor->getName(), (string) $this->xml['vendor'] );
    $this->assertRegExp( '/[0-9]{4}-[0-9]{2}-[0-9]{2}T[0-9]{2}:[0-9]{2}:[0-9]{2}/', (string) $this->xml['modified'] );
  }

  /**
   * Each event should have a name
   */
  public function testGeneratedXMLEventDirectChildTags()
  {
    $this->assertEquals( 'test event', (string) $this->xml->event[0]->name );
    $this->assertEquals( 1, (int) $this->xml->event[0]->category );
    $this->assertEquals( 3, (int) $this->xml->event[1]->category );
  }

  /**
   * test geneate if xml has at least one event with its required children
   */
  public function testGeneratedXMLEvent()
  {
    $events = $this->xml->xpath( '/vendor-events/event' );
    $this->assertGreaterThan( 0, count( $events ) );

    $firstEvent = $events[0];
    $this->assertStringStartsWith( 'veid_', (string) $firstEvent['veid'] );
    $this->assertRegExp( '/[0-9]{4}-[0-9]{2}-[0-9]{2}T[0-9]{2}:[0-9]{2}:[0-9]{2}/', (string) $firstEvent['modified'] );
 
  }

  /**
   * Each event should have atleast one version tag
   */
  public function testGeneratedXMLEventVersionTag()
  {
    $this->assertEquals( 'en', (string) $this->xml->event[0]->version['lang'] );
  }

  /**
   * Check the version tag's children
   */
  public function testGeneratedXMLEventVersionDirectChildrenTags()
  {
    $this->assertEquals( 'test vendor category', (string) $this->xml->event[0]->version->{'vendor-category'} );
    $this->assertEquals( 'test vendor short description', (string) $this->xml->event[0]->version->{'short-description'} );
    $this->assertEquals( 'test vendor description', (string) $this->xml->event[0]->version->{'description'} );
    $this->assertEquals( 'test booking url', (string) $this->xml->event[0]->version->{'booking-url'} );
    $this->assertEquals( 'test url', (string) $this->xml->event[0]->version->{'url'} );
    $this->assertEquals( 'test price', (string) $this->xml->event[0]->version->{'price'} );
  }

  /**
   * Check showtimes children
   */
  public function testGeneratedXMLEventShowtimesDirectChildrenTags()
  {
    $this->assertEquals( '1', (string) $this->xml->event[0]->showtimes[0]->place['place-id'] );
    $this->assertEquals( 'test booking url', (string) $this->xml->event[0]->showtimes[0]->occurrence->{'booking-url'} );
    $this->assertEquals( '2010-01-31 21:00:20', (string) $this->xml->event[0]->showtimes[0]->occurrence->time->{'start-date'}  );
    $this->assertEquals( '2010-01-31 22:30:00', (string) $this->xml->event[0]->showtimes[0]->occurrence->time->{'end-date'}  );
    $this->assertEquals( '-05:00:00', (string) $this->xml->event[0]->showtimes[0]->occurrence->time->{'utc-offset'} );
  }
  
  /**
   * check properties tags
   */
  public function testPropertyTags()
  {
    $properties = $this->xml->event[0]->version->property;
    $this->assertEquals( 'test key 1', (string) $properties[0]['key'] );
    $this->assertEquals( 'test value 1', (string) $properties[0] );
    $this->assertEquals( 'test key 2', (string) $properties[1]['key'] );
    $this->assertEquals( 'test value 2', (string) $properties[1] );
  }

}
?>
