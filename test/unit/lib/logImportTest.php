<?php
require_once 'PHPUnit/Framework.php';

require_once dirname(__FILE__).'/../../../lib/logImport.class.php';
require_once dirname(__FILE__).'/../../../test/bootstrap/unit.php';
require_once dirname( __FILE__ ) . '/../bootstrap.php';
spl_autoload_register(array('Doctrine', 'autoload'));

/**
 * Test class for logImport.
 * Generated by PHPUnit on 2010-02-16 at 13:47:54.
 */
class logImportTest extends PHPUnit_Framework_TestCase
{
    /**
     * @var logImport
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {

        try {

          ProjectN_Test_Unit_Factory::createDatabases();

          Doctrine::loadData('data/fixtures');
          $this->vendorObj = Doctrine::getTable('Vendor')->getVendorByCityAndLanguage('ny', 'en-US');

        }
        catch( Exception $e )
        {
          echo $e->getMessage();
        }



        $this->object = new logImport($this->vendorObj);
        $this->object->setType(logImport::MOVIE);
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
        ProjectN_Test_Unit_Factory::destroyDatabases();
    }


    /**
     * Test that a new insert is incremented
     */
    public function testCountNewInsert()
    {
        $this->object->countNewInsert();
        $this->object->countNewInsert();
        $this->object->countNewInsert();
        $this->object->countNewInsert();
        $this->object->countNewInsert();
        $this->assertEquals('5', $this->object->totalInserts, 'Increment the total by 5');
    }

    /**
     * Test that new updates are counted
     */
    public function testCountUpdate()
    {
       //The item is modified therefore log as an update
        $log = "Description: this is changed text \n";
        $log.= "Name: this is a changed name \n";

        $this->object->addChange('update', $log);

       $this->assertEquals('1', $this->object->totalUpdates, 'Increment the total updates by one');
    }


    /**
     * Test that existing entries that don't need updating are counted
     */
    public function testCountExists()
    {
        $this->object->countExisting();
        $this->object->countExisting();
        $this->object->countExisting();

        $this->assertEquals('3', $this->object->totalExisting, 'Increment the total existing by one');
    }

    /**
     * Tests the save functionality
     */
    public function testSave()
    {
        $this->object->countNewInsert();
        $this->object->countNewInsert();
        $this->object->countNewInsert();
        $this->object->countNewInsert();
        $this->object->countNewInsert();

        //Add an exception
        try{
            throw new Exception('Testing Exception');
        }
        catch(Exception $error)
        {

            //Add two for testing
            $log = "Test exception";
            $this->object->addError($error, $log);

            $log = "Test exception";
            $this->object->addError($error, $log);
        }

        //The item is modified therefore log as an update
        $log = "Description: this is changed text \n";
        $log.= "Name: this is a changed name \n";

        $this->object->addChange('update', $log);


        //save to DB
        $this->object->save();

        //Test errrors
        $results = Doctrine::getTable('ImportLoggerError')->findAll();
        $results = $results->toArray();
        $this->assertEquals(2, count($results), 'Testing errors are in DB');

        $this->assertEquals(2, $this->object->totalErrors, 'Fetching total errors');



        //Test changes
        $results = Doctrine::getTable('ImportLoggerChange')->findAll();
        $results = $results->toArray();
        $this->assertEquals(1, count($results), 'Testing changes are in DB');

        //Test the logger
        $results = Doctrine::getTable('ImportLogger')->findAll();
        $results = $results->toArray();
        $this->assertEquals(1, count($results), 'Testing logger is in DB');
    }

    /**
     * Test that exceptions are logged
     */
    public function testAddError()
    {
        try{
            throw new Exception('Testing Exception');
        }
        catch(Exception $error)
        {
            $log = "Test exception";
            $this->object->addError($error, $log);
        }

        $this->assertEquals(1, count($this->object->errorsCollection->toArray()), 'Testing the error collection');
    }

    /**
     * Test to see that a change is logged
     */
    public function testAddChange()
    {
        //The item is modified therefore log as an update
         $log = "Description: this is changed text \n";
         $log.= "Name: this is a changed name \n";

         $this->object->addChange('update', $log);

         $this->assertEquals(1, count($this->object->changesCollection->toArray()), 'Testing the error collection');
    }

    /**
     * Test that the type is set
     */
    public function testSetType()
    {
        $this->object->setType(logImport::MOVIE);
        $this->assertEquals('movie', $this->object->type ,'Test that movie is set');
    }

    /**
     * Test that an invalid type is not accepted
     */
    public function testCheckType()
    {
        $this->setExpectedException('Exception');
        $this->object->setType('movies');
    }
}
?>
