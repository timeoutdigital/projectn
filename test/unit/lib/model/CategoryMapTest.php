<?php
require_once 'PHPUnit/Framework.php';

require_once dirname(__FILE__).'/../../../../test/bootstrap/unit.php';
require_once dirname(__FILE__).'/../../bootstrap.php';

/**
 * Test class for CategoryMap.
 * Generated by PHPUnit on 2010-03-08 at 19:11:00.
 */
class CategoryMapTest extends PHPUnit_Framework_TestCase {
    /**
     * @var CategoryMap
     */
    protected $object;

    /**
     * @var Vendor
     */
    protected $vendorObj;

    /**
     * @var Vendor
     */
    protected $vendorObj2;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        ProjectN_Test_Unit_Factory::createDatabases();

        $this->vendorObj = ProjectN_Test_Unit_Factory::get( 'Vendor' );
        $this->vendorObj->save();

        $this->vendorObj2 = ProjectN_Test_Unit_Factory::get( 'Vendor' );
        $this->vendorObj2->save();

        // add vendor cats
        $poi1 = ProjectN_Test_Unit_Factory::get( 'Poi' );
        $poi1->addVendorCategory( 'test vendor 1 category one', $this->vendorObj[ 'id' ] );
        $poi1->save();

        $poi2 = ProjectN_Test_Unit_Factory::get( 'Poi' );
        $poi2->addVendorCategory( 'test vendor 1 category two', $this->vendorObj[ 'id' ] );
        $poi2->save();

        $poi3 = ProjectN_Test_Unit_Factory::get( 'Poi' );
        $poi3->addVendorCategory( 'test vendor 2 category one', $this->vendorObj2[ 'id' ] );
        $poi3->save();

        // add cats
        $poiCategory1 = new PoiCategory();
        $poiCategory1[ 'name' ] = 'category one';
        $poiCategory2 = new PoiCategory();
        $poiCategory2[ 'name' ] = 'category two';

        $vendorPoiCategory1 = Doctrine::getTable( 'VendorPoiCategory' )->findOneByName( 'test vendor 1 category one' );
        $vendorPoiCategory1[ 'PoiCategory' ][] = $poiCategory1;
        $vendorPoiCategory1[ 'PoiCategory' ][] = $poiCategory2;
        $vendorPoiCategory1[ 'PoiCategory' ][] = $poiCategory2;
        $vendorPoiCategory1->save();

        $poiCategory3 = new PoiCategory();
        $poiCategory3[ 'name' ] = 'category three';

        $vendorPoiCategory3 = Doctrine::getTable( 'VendorPoiCategory' )->findOneByName( 'test vendor 2 category one' );
        $vendorPoiCategory3[ 'PoiCategory' ][] = $poiCategory3;
        $vendorPoiCategory3->save();
        
        $this->object = new CategoryMap( false );
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
        ProjectN_Test_Unit_Factory::destroyDatabases();
    }

    /**
     */
    public function testMapCategories()
    {
        // map 1
        $vendorPoiCategories = new Doctrine_Collection( Doctrine::getTable( 'VendorPoiCategory' ) );
        $vendorPoiCategories[] = Doctrine::getTable( 'VendorPoiCategory' )->findOneByName( 'test vendor 1 category one' );
        $mappedPoiCategories1 = $this->object->mapCategories( $this->vendorObj, $vendorPoiCategories, 'Poi' );
        // map 2
        $vendorPoiCategories = new Doctrine_Collection( Doctrine::getTable( 'VendorPoiCategory' ) );
        $vendorPoiCategories[] = Doctrine::getTable( 'VendorPoiCategory' )->findOneByName( 'test vendor 1 category two' );
        $mappedPoiCategories2 = $this->object->mapCategories( $this->vendorObj, $vendorPoiCategories, 'Poi' );
        // map 3
        $vendorPoiCategories = new Doctrine_Collection( Doctrine::getTable( 'VendorPoiCategory' ) );
        $vendorPoiCategories[] = Doctrine::getTable( 'VendorPoiCategory' )->findOneByName( 'test vendor 2 category one' );
        $mappedPoiCategories3 = $this->object->mapCategories( $this->vendorObj, $vendorPoiCategories, 'Poi' );
        // map 3
        $vendorPoiCategories = new Doctrine_Collection( Doctrine::getTable( 'VendorPoiCategory' ) );
        $vendorPoiCategories[] = Doctrine::getTable( 'VendorPoiCategory' )->findOneByName( 'test vendor 2 category one' );
        $mappedPoiCategories4 = $this->object->mapCategories( $this->vendorObj2, $vendorPoiCategories, 'Poi' );

        $this->assertEquals( 2 , count( $mappedPoiCategories1 ) );
        $this->assertEquals( 0 , count( $mappedPoiCategories2 ) );
        $this->assertEquals( 0 , count( $mappedPoiCategories3 ) );
        $this->assertEquals( 1 , count( $mappedPoiCategories4 ) );

        $this->assertEquals( 'category one', $mappedPoiCategories1[ 0 ][ 'name' ] );
        $this->assertEquals( 'category two', $mappedPoiCategories1[ 1 ][ 'name' ] );
        $this->assertEquals( 'category three', $mappedPoiCategories4[ 0 ][ 'name' ] );
    }

}
?>
