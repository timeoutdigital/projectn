<?php
require_once 'PHPUnit/Framework.php';

require_once dirname(__FILE__).'/../../../../../test/bootstrap/unit.php';
require_once dirname(__FILE__).'/../../../bootstrap.php';

/**
 * Test class for EventTable.
 * Generated by PHPUnit on 2010-01-19 at 18:34:39.
 */
class EventTableTest extends PHPUnit_Framework_TestCase
{
  /**
   * @var EventTable
   */
  protected $object;

  /**
   * Sets up the fixture, for example, opens a network connection.
   * This method is called before a test is executed.
   */
  protected function setUp()
  {
    ProjectN_Test_Unit_Factory::createSqliteMemoryDb();

    $poi1 = ProjectN_Test_Unit_Factory::add( 'poi' );

    $vendor2 = ProjectN_Test_Unit_Factory::add( 'vendor' );
    
    $poi2 = ProjectN_Test_Unit_Factory::get( 'poi' );
    $poi2->link( 'Vendor', array( $vendor2->getId() ) );
    $poi2->save();

    $eventCategory = new EventCategory();
    $eventCategory->setName( 'event category 1' );
    $eventCategory->save();
    
    $event = new Event();
    $event['vendor_event_id'] = 1111;
    $event->setName( 'test event1' );
    $event->link( 'Vendor', array( 1 ) );
    $event->save();

    $event = new Event();
    $event['vendor_event_id'] = 1111;
    $event->setName( 'test event2' );
    $event->link( 'Vendor', array( 1 ) );
    $event->save();

    $event = new Event();
    $event['vendor_event_id'] = 1111;
    $event->setName( 'test event2' );
    $event->link( 'Vendor', array( 1 ) );
    $event->save();

    $event = new Event();
    $event['vendor_event_id'] = 1111;
    $event->setName( 'test event3' );
    $event->link( 'Vendor', array( 2 ) );
    $event->save();

    $this->object = Doctrine::getTable('Event');
  }

  /**
   * Tears down the fixture, for example, closes a network connection.
   * This method is called after a test is executed.
   */
  protected function tearDown()
  {
    ProjectN_Test_Unit_Factory::destroySqliteMemoryDb();
  }

  /**
   * @todo Implement testFindByVendorId().
   */
  public function testFindByVendorId()
  {
    $this->assertEquals( 3, count( $this->object->findByVendorId( 1 ) ) );
    $this->assertEquals( 1, count( $this->object->findByVendorId( 2 ) ) );
  }
}
?>
