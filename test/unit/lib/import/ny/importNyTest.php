<?php
require_once 'PHPUnit/Framework.php';

require_once dirname(__FILE__).'/../../../../../lib/import/ny/nyImport.class.php';
require_once dirname(__FILE__).'/../../../../../lib/processXml.class.php';
require_once dirname(__FILE__).'/../../../../../test/bootstrap/unit.php';
spl_autoload_register(array('Doctrine', 'autoload'));


/**
 * Test class for importNy.
 * Generated by PHPUnit on 2010-01-07 at 12:14:28.
 *
 *
 * @author Tim Bowler <timbowler@timeout.com>
 *
 *
 */
class importNyTest extends PHPUnit_Framework_TestCase
{
  /**
   * @var importNy
   */
  protected $object;
  protected $dbObj;

  /**
   * Sets up the fixture, for example, opens a network connection.
   * This method is called before a test is executed.
   */
  protected function setUp() {

    try {

      $pDB = Doctrine_Manager::connection(new PDO('sqlite::memory:'));
      Doctrine::createTablesFromModels( dirname(__FILE__).'/../../../../../lib/model/doctrine');
 
    }
    catch(PDOException $e)
    {
      echo $e->getMessage();
    }

    /*$processXmlObj = new processXml('test/unit/data/tony_leo_test_correct.xml');

    //Set the events and venues xpath
    $processXmlObj->setEvents('/body/event')->setVenues('/body/address');

    //Get a vendor
    $vendorObj = Doctrine::getTable('Vendor')->getVendorByCityAndLanguage('ny', 'english');


    //Instatiate object
    $this->object = new importNy($processXmlObj, $vendorObj);
    $this->dbObj = database::factory('dev');

*/
  }

  
  /**
   * Tears down the fixture, for example, closes a network connection.
   * This method is called after a test is executed.
   */
  protected function tearDown() {


    //Close DB connection
    Doctrine_Manager::getInstance()->closeConnection(Doctrine_Manager::connection());
  }


  /**
   * @todo finish test
   */
  public function testInsertEvent()
  {
   
    $t = new Vendor();
    $t->setCity('test');
    $t->setLanguage('english');
    $t->save();

    

    $vendorObj = Doctrine::getTable('Vendor')->getVendorByCityAndLanguage('test', 'english');


    $this->assertTrue($this->object->insertEventsAndVenues());
  }

  /**
   * @todo finish test
   */
  public function testInsertPoi()
  {
   // $this->assertTrue($this->object->insertEventsAndVenues());
  }



}
?>
