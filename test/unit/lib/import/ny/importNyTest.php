<?php
require_once 'PHPUnit/Framework.php';

require_once dirname(__FILE__).'/../../../../../lib/import/ny/nyImport.class.php';
require_once dirname(__FILE__).'/../../../../../lib/processXml.class.php';
require_once dirname(__FILE__).'/../../../../../test/bootstrap/unit.php';
spl_autoload_register(array('Doctrine', 'autoload'));


/**
 * Test class for importNy.
 * Generated by PHPUnit on 2010-01-07 at 12:14:28.
 *
 *
 * @author Tim Bowler <timbowler@timeout.com>
 *
 *
 */
class importNyTest extends PHPUnit_Framework_TestCase
{
  /**
   * @var importNy
   */
  protected $object;

  protected $xmlObj;

  protected $vendorObj;

  /**
   * Sets up the fixture, for example, opens a network connection.
   * This method is called before a test is executed.
   */
  protected function setUp() {

    try {
      $pDB = Doctrine_Manager::connection(new PDO('sqlite::memory:'));
      Doctrine::createTablesFromModels( dirname(__FILE__).'/../../../../../lib/model/doctrine' );
      Doctrine::loadData('data/fixtures');
      $this->vendorObj = Doctrine::getTable('Vendor')->getVendorByCityAndLanguage('ny', 'en-GB');

      $poiCategoryObj = new PoiCategory();
      $poiCategoryObj[ 'name' ] = 'theatre-music-culture';
      $poiCategoryObj->save();

      $this->xmlObj = new processNyXml( dirname(__FILE__).'/../../../data/tony_leo_test_correct.xml' );
      $this->xmlObj->setEvents('/body/event')->setVenues('/body/address');
      
      $this->object = new importNy( $this->xmlObj, $this->vendorObj );

    }
    catch( Exception $e )
    {
      echo $e->getMessage();
    }

  }

  
  /**
   * Tears down the fixture, for example, closes a network connection.
   * This method is called after a test is executed.
   */
  protected function tearDown() {
    //Close DB connection
    Doctrine_Manager::getInstance()->closeConnection(Doctrine_Manager::connection());
  }


   /**
   * testInsertPoi
    *
    * @todo Create Regreshion test
   */
  public function testInsertPoi()
  {
    $venuesArray = $this->xmlObj->getVenues();
    $this->object->insertPoi( $venuesArray[ 0 ] );

    $poiObj = Doctrine::getTable('Poi')->findByPoiName('Zankel Hall (at Carnegie Hall)');

    $this->assertEquals( 1, count( $poiObj ) );
  }

  /**
   * Tests that testInsertEvent
   *
   * @todo add occurrence
   */
  public function testInsertEvent()
  {
    $venuesArray = $this->xmlObj->getVenues();
    $this->object->insertPoi( $venuesArray[ 0 ] );

    $eventsArray = $this->xmlObj->getEvents();
    $this->object->insertEvent( $eventsArray[ 0 ] );

    $eventObj = Doctrine::getTable('Event')->findByName('Rien Que Les Heures');
    $this->assertEquals( 1, count( $eventObj ) );

  }

  /*
   * Test catgegory property for poi
   *
   * <category_combi id="329">
   *   <category1 id="279">Film</category1>
   *   <category2 id=""/>
   *   <category3 id=""/>
   * </category_combi>
   *
  */
  public function testPoiCategoryProperty()
  {
    $venuesArray = $this->xmlObj->getVenues();
    $this->object->insertPoi( $venuesArray[ 0 ] );

    $eventsArray = $this->xmlObj->getEvents();
    $this->object->insertEvent( $eventsArray[ 0 ] );

    $poiObj = Doctrine::getTable('Poi')->findOneByPoiName('Zankel Hall (at Carnegie Hall)');

    foreach( $poiObj['PoiProperty'] as $eventPropertyObj )
    {
      if ( $eventPropertyObj[ 'lookup' ] == 'category' )
      {
        $this->assertEquals( 'Film', $eventPropertyObj[ 'value' ] );
        break;
      }
    }

  }

  public function testInsertEventProperty()
  {
    $venuesArray = $this->xmlObj->getVenues();
    $this->object->insertPoi( $venuesArray[ 0 ] );

    $eventsArray = $this->xmlObj->getEvents();
    $this->object->insertEvent( $eventsArray[ 0 ] );

    $eventObj = Doctrine::getTable('Event')->findOneByName('Rien Que Les Heures');

    foreach( $eventObj['EventProperty'] as $eventPropertyObj )
    {
      if ( $eventPropertyObj[ 'lookup' ] == 'prices' )
      {
        $this->assertEquals( '$10', $eventPropertyObj[ 'value' ] );
        break;
      }
    }
  }

  public function testContactBlurb()
  {
    $venuesArray = $this->xmlObj->getVenues();
    $this->object->insertPoi( $venuesArray[ 0 ] );

    $eventsArray = $this->xmlObj->getEvents();
    $this->object->insertEvent( $eventsArray[ 0 ] );

    $eventObj = Doctrine::getTable('Event')->findOneByName('Rien Que Les Heures');

    // url
    $this->assertEquals( 'http://theatermania.com', $eventObj[ 'url' ] );

    // email
    foreach( $eventObj['EventProperty'] as $eventPropertyObj )
    {
      if ( $eventPropertyObj[ 'lookup' ] == 'email' )
      {
        $this->assertEquals( 'steve@timeout.com', $eventPropertyObj[ 'value' ] );
        break;
      }
    }

    // phone
    foreach( $eventObj['EventProperty'] as $eventPropertyObj )
    {
      if ( $eventPropertyObj[ 'lookup' ] == 'phone' )
      {
        $this->assertEquals( '212-352-3101', $eventPropertyObj[ 'value' ] );
        break;
      }
    }

  }

  /*
   * test insertVendorPoiCategories
   */
  public function testInsertVendorPoiCategories()
  {
    $poisArray = $this->xmlObj->getVenues();
    $this->object->insertVendorPoiCategories( $poisArray[ 0 ] );

    $vendorPoiCategory = Doctrine::getTable('VendorPoiCategory')->findAll();

    $this->assertGreaterThan( 0, count( $vendorPoiCategory)  );
  }

  /*
   * test insertVendorEventCategories
   */
  public function testInsertVendorEventCategories()
  {
    $eventsArray = $this->xmlObj->getEvents();
    $this->object->insertVendorEventCategories( $eventsArray[ 0 ] );

    $vendorEventCategory = Doctrine::getTable('VendorEventCategory')->findAll();

    $this->assertGreaterThan( 0, count( $vendorEventCategory)  );
  }

  /*
   * Test if event category is appended
   */
  public function testCategoryIfEventCategoryIsSuccessfullyAppended()
  {
    $venuesArray = $this->xmlObj->getVenues();
    $this->object->insertPoi( $venuesArray[ 0 ] );

    $eventsArray = $this->xmlObj->getEvents();
    $this->object->insertEvent( $eventsArray[ 0 ] );

    $eventObj = Doctrine::getTable('Event')->findOneByName('Rien Que Les Heures');

    $this->assertEquals( 'movies', $eventObj['EventCategories'][ 0 ][ 'name' ] );

    $this->assertEquals( 'other', $eventObj['EventCategories'][ 1 ][ 'name' ] );
  }

    /*
   * Test if poi category is appended
   */
  public function testCategoryIfPoiCategoryIsSuccessfullyAppended()
  {
    $venuesArray = $this->xmlObj->getVenues();
    $this->object->insertPoi( $venuesArray[ 0 ] );

    $venueObj = Doctrine::getTable('Poi')->findOneByPoiName('Zankel Hall (at Carnegie Hall)');

    $this->assertEquals( 'shop', $venueObj['PoiCategories'][ 0 ][ 'name' ] );
  }

  /*
   * Test if the poi categories get mapped correctly
   */
  public function testPoiCategoryMapShops()
  {
    $categoryArray = array( 'Some invalid category', 'Another invalid category', 'Shops' );

    $mappedCategoriesObject = $this->object->mapCategories( $categoryArray, 'PoiCategory' );

    $this->assertTrue( $mappedCategoriesObject instanceof Doctrine_Collection );

    $this->assertEquals( 1, count( $mappedCategoriesObject ) );
  }

  /*
   * Test if the event categories get mapped correctly
   */
  public function testEventCategoryMapMovies()
  {
    $categoryArray = array( 'Some invalid category', 'Another invalid category', 'Film' );

    $mappedCategoriesObject = $this->object->mapCategories( $categoryArray, 'EventCategory' );

    $this->assertTrue( $mappedCategoriesObject instanceof Doctrine_Collection );

    $this->assertEquals( 2, count( $mappedCategoriesObject ) );
  }

}
?>
