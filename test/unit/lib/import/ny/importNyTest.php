<?php
require_once 'PHPUnit/Framework.php';

require_once dirname(__FILE__).'/../../../../../lib/import/ny/nyImport.class.php';
require_once dirname(__FILE__).'/../../../../../lib/processXml.class.php';
//require_once dirname(__FILE__).'/../../../../../lib/vendor/symfony/lib/plugins/sfDoctrinePlugin/lib/vendor/doctrine/Doctrine.php';
require_once dirname(__FILE__).'/../../../../../test/bootstrap/unit.php';
spl_autoload_register(array('Doctrine', 'autoload'));
//require_once dirname(__FILE__).'/../../../../../lib/import/database.class.php';


/**
 * Test class for importNy.
 * Generated by PHPUnit on 2010-01-07 at 12:14:28.
 */
class importNyTest extends PHPUnit_Framework_TestCase {
  /**
   * @var importNy
   */
  protected $object;
  protected $dbObj;

  /**
   * Sets up the fixture, for example, opens a network connection.
   * This method is called before a test is executed.
   */
  protected function setUp() {
//$t = new Poi();
 //   
 //   Doctrine::createTablesFromModels();

    //Doctrine::createDatabases();
   // Doctrine::createTablesFromModels('../../lib/models');

  //  $pdo_handler = $conn->getPdh();
try {
    /*** connect to SQLite database ***/
    //$db = new PDO("sqlite::memory");
   // Doctrine_Manager::connection();
    //Doctrine::createTablesFromModels( dirname(__FILE__).'/../../../../../lib/model/doctrine');

   //  $all_query = readfile(dirname(__FILE__).'/../../../../../data/sql/schema.sql');
   //  $ini_handle = fopen(dirname(__FILE__).'/../../../../../data/sql/schema.sql', "r");
   //  $ini_contents = fread($ini_handle, filesize(dirname(__FILE__).'/../../../../../data/sql/schema.sql'));
   //  fclose($ini_handle);
//$manager = Doctrine_Manager::getInstance();



    $pDB = Doctrine_Manager::connection(new PDO('sqlite::memory:'));
    Doctrine::createTablesFromModels( dirname(__FILE__).'/../../../../../lib/model/doctrine');
    $dbObj = $pDB->getDbh();

    //$sql = "CREATE TABLE vendor (id BIGINT AUTO_INCREMENT, city VARCHAR(15) NOT NULL, language VARCHAR(10) NOT NULL, created_at DATETIME NOT NULL, updated_at DATETIME NOT NULL, PRIMARY KEY(id))";

    $dbObj->prepare( $sql );


    $t = new Vendor();
    $t->setCity('test');
    $t->setLanguage('english');
    $t->save();



    $vendorObj = Doctrine::getTable('Vendor')->getVendorByCityAndLanguage('test', 'english');

    var_dump($vendorObj->getLanguage());



    //print_r($t);


    //Doctrine::createDatabases(new PDO('sqlite::memory:'));
    //Doctrine::createTablesFromModels( dirname(__FILE__).'/../../../../../lib/model/doctrine');
//    $cofre = Doctrine_Core::loadModels(dirname(__FILE__).'/../../../../../lib/model/doctrine/base');
//    $cofre2 = Doctrine_Core::loadModels(dirname(__FILE__).'/../../../../../lib/model/doctrine');

   // Doctrine_Core::createTablesFromModels('models');
//    Doctrine::createTablesFromModels();
    //print_r($cofre);
  //  $pDB->getDbh();

  //  print_r($pDB);
    
 //   $sql = mysql_real_escape_string('
 //           SELECT *
 //           FROM
 //             table');
 //
 /*    $statement = $dbObj->prepare( $sql );
 
        if( $statement->execute() )
        {
            $results = $statement->fetchAll();
        }
 *./

    /*** a little message to say we did it ***/
    //echo 'database created in memory';
    }
catch(PDOException $e)
    {
    echo $e->getMessage();
    }

    /*$processXmlObj = new processXml('test/unit/data/tony_leo_test_correct.xml');

    //Set the events and venues xpath
    $processXmlObj->setEvents('/body/event')->setVenues('/body/address');

    //Get a vendor
    $vendorObj = Doctrine::getTable('Vendor')->getVendorByCityAndLanguage('ny', 'english');


    //Instatiate object
    $this->object = new importNy($processXmlObj, $vendorObj);
    $this->dbObj = database::factory('dev');

*/
  }

  /**
   * Tears down the fixture, for example, closes a network connection.
   * This method is called after a test is executed.
   */
  protected function tearDown() {
  }


  /**
   * @todo finish test
   */
  public function testInsertEvent()
  {
   
    //$this->assertTrue($this->object->insertEventsAndVenues());
  }

  /**
   * @todo finish test
   */
  public function testInsertPoi()
  {
   // $this->assertTrue($this->object->insertEventsAndVenues());
  }



}
?>
