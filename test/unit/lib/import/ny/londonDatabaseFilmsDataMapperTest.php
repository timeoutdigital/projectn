<?php
require_once 'PHPUnit/Framework.php';
require_once dirname(__FILE__).'/../../../../../test/bootstrap/unit.php';
require_once dirname( __FILE__ ) . '/../../../bootstrap.php';

/**
 * Test class for nyMoviesDataMapper.
 * Generated by PHPUnit on 2010-02-16 at 16:30:38.
 */
class LondonDatabaseMoviesDataMapperTest extends PHPUnit_Framework_TestCase
{
  /**
   * @var nyMoviesDataMapper
   */
  protected $object;

  /**
   * @var Vendor
   *
   */
  private $vendor;

  /**
   * Sets up the fixture, for example, opens a network connection.
   * This method is called before a test is executed.
   */
  protected function setUp()
  {
    ProjectN_Test_Unit_Factory::createDatabases();
    $vendor = new Vendor();
    $vendor['city'] = 'ny';
    $vendor['language'] = 'en-US';
    $vendor->save();
    $this->vendor = $vendor;
  }

  /**
   * Tears down the fixture, for example, closes a network connection.
   * This method is called after a test is executed.
   */
  protected function tearDown()
  {
    ProjectN_Test_Unit_Factory::destroyDatabases();
  }

  public function testGetsFilmsFromLondonDatabase()
  {
    $importer = new UnitTestNyMoviesImporter();
    $importer->addDataMapper( new londonDatabaseFilmsDataMapper( $this->vendor ) );
    $importer->run();
    
    $this->assertTrue( $importer->onRecordMappedCalled );
  }
  
  public function testMappingValidatesAndSaves()
  {
    $this->runImport();
    $this->assertGreaterThan( 0, Doctrine::getTable( 'Movie' )->count() );
  }
  
  /**
   * 
   */
  public function testGenreFields()
  {
    $this->runImport();
    $movie =  Doctrine::getTable( 'Movie' )->findOneById( 1 );
    $this->assertTrue( !empty( $movie[ 'MovieGenres' ][ 0 ][ 'genre' ] ) ,'genre should not be empty' );

  }
  protected function runImport()
  {
    $importer = new Importer();
    $importer->addDataMapper( new londonDatabaseFilmsDataMapper( $this->vendor ) );
    $importer->run();
  }
}

class UnitTestNyMoviesImporter extends Importer
{
  public $onRecordMappedCalled = false;

  public function onRecordMapped()
  {
    $this->onRecordMappedCalled = true;
  }
}
?>
