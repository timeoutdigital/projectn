<?php
require_once 'PHPUnit/Framework.php';

require_once dirname(__FILE__).'/../../../../../lib/import/validation/POIValidationSpecification.class.php';

/**
 * Test class for POIValidationSpecification.
 * Generated by PHPUnit on 2010-01-08 at 14:33:30.
 */
class POIValidationSpecificationTest extends PHPUnit_Framework_TestCase
{
  
  private $object;

  /**
   * Sets up the fixture, for example, opens a network connection.
   * This method is called before a test is executed.
   */
  protected function setUp()
  {
    $this->object = new POIValidationSpecification();
  }

  /**
   * Tears down the fixture, for example, closes a network connection.
   * This method is called after a test is executed.
   */
  protected function tearDown()
  {
  }

  /**
   * Checks validatePoiName() returns true is a string and not empty
   */
  public function testValidatesPoiName()
  {
    $this->assertFalse( $this->object->validatePoiName( '' ) );
    $this->assertFalse( $this->object->validatePoiName( 34 ) );
    $this->assertTrue(  $this->object->validatePoiName( '34' ) );
    $this->assertTrue(  $this->object->validatePoiName( 'Abc ^&DEF-_-' ) );
  }

  /**
   * Checks validateAddress() returns true is a string and not empty
   */
  public function testValidatesAddress()
  {
    $this->assertFalse( $this->object->validateAddress( '' ) );
    $this->assertFalse( $this->object->validateAddress( 34 ) );
    $this->assertFalse( $this->object->validateAddress( '34' ) );
    //$this->assertTrue(  $this->object->validateAddress( 'Abc ^&DEF-_-' ) );
  }

  /**
   * Checks validateStreet() returns true is a string and not empty
   */
  public function testValidatesStreet()
  {
    $this->assertFalse( $this->object->validateStreet( '' ) );
    $this->assertFalse( $this->object->validateStreet( 34 ) );
    $this->assertTrue(  $this->object->validateStreet( '34' ) );
    $this->assertTrue(  $this->object->validateStreet( 'Abc ^&DEF-_-' ) );
  }

  /**
   * Checks validateCity() returns true if is a string and not empty
   */
  public function testValidatesCity()
  {
    $this->assertFalse( $this->object->validateCity( '' ) );
    $this->assertFalse( $this->object->validateCity( 34 ) );
    $this->assertFalse( $this->object->validateCity( '34' ) );
    $this->assertFalse( $this->object->validateCity( 'Abc ^&DEF-_-' ) );
    $this->assertTrue(  $this->object->validateCity( 'District 9-1' ) );
  }

  /**
   * Checks validatePublicTransportLink() is true for
   * non-empty strings with only alphanumeric and [-_:,] characters
   */
  public function testValidatesPublicTransportLink()
  {
    $this->assertFalse( $this->object->validatePublicTransportLink( '' ) );
    $this->assertFalse( $this->object->validatePublicTransportLink( 34 ) );
    $this->assertFalse( $this->object->validatePublicTransportLink( '34' ) );
    $this->assertFalse( $this->object->validatePublicTransportLink( 'Abc ^&DEF-_-' ) );
    $this->assertTrue(  $this->object->validatePublicTransportLink( 'Buses: 31, 131, Tubes: Finchy Road' ) );
  }

  /**
   * Checks validatesLongituteLatitude() returns true if meets WG584 standard
   */
  public function testValidatesLongituteLatitude()
  {
    $this->assertFalse( $this->object->validateLongituteLatitude( '' ) );
    $this->assertTrue( $this->object->validateLongituteLatitude( '0.0' ) );
  }
}
?>
