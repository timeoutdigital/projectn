<?php
require_once 'PHPUnit/Framework.php';
require_once dirname( __FILE__ ) . '/../../../../../test/bootstrap/unit.php';
require_once dirname( __FILE__ ) . '/../../../bootstrap.php';

/**
 * Test class for LondonImporter.
 * Generated by PHPUnit on 2010-01-21 at 15:51:00.
 */
class LondonImporterTest extends PHPUnit_Framework_TestCase
{
    /**
     * @var LondonImporter
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
    	// create london connection
    	Doctrine_Manager::connection( new PDO( 'sqlite::memory:' ), 'searchlight_london' );

    	// load project n
        ProjectN_Test_Unit_Factory::createSqliteMemoryDb( 'project_n' );
        Doctrine::loadData( 'data/fixtures' );

        // load london data
        Doctrine::loadData( dirname( __FILE__ ) . '/../../../../../plugins/toLondonPlugin/data/fixtures/fixtures.yml' );
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
        ProjectN_Test_Unit_Factory::destroySqliteMemoryDb( 'searchlight_london' );
        ProjectN_Test_Unit_Factory::destroySqliteMemoryDb( 'project_n' );
    }

    /**
     * @todo Implement testRun().
     */
    public function testRun()
    {
    }

    /**
     *
     * @uses /plugins/toLondonPlugin/data/fixtures/fixtures.yml
     */
    public function testProcessImportedVenue()
    {
        $this->object = new LondonImporter( );

        $this->object->run( );

        $poi = Doctrine::getTable( 'Poi' )->findOneByVendorPoiId( 1 );

        $this->assertTrue( $poi instanceof Doctrine_Record );
    }

    /**
     *
     * @uses /plugins/toLondonPlugin/data/fixtures/fixtures.yml
     */
    public function testProcessImportedEvent()
    {
        $this->object = new LondonImporter( );

        $this->object->run( );

        $event = Doctrine::getTable( 'Event' )->findOneByVendorEventId( 1 );

        $this->assertTrue( $event instanceof Doctrine_Record );
    }

    /**
     *
     * @uses /plugins/toLondonPlugin/data/fixtures/fixtures.yml
     */
    public function testProcessImportedOccurrence()
    {
        $this->object = new LondonImporter( );

        $this->object->run( );

        $occurrence = Doctrine::getTable( 'EventOccurrence' )->findOneByVendorEventOccurrenceId( 1 );

        $this->assertTrue( $occurrence instanceof Doctrine_Record );
    }

    /**
     *
     */
    public function testProcessVenues()
    {
        /*    $geoEncoder = $this->getMock('geoEncode', array( 'setAddress', 'getGeoCode', 'getLongitude', 'getLatitude' ) );

    $geoEncoder->expects( $this->atLeastOnce() )
               ->method( 'setAddress' );

    $geoEncoder->expects( $this->atLeastOnce() )
               ->method( 'getGeoCode' )
               ->will( $this->returnValue( $geoEncoder ) );

    $geoEncoder->expects( $this->atLeastOnce() )
               ->method( 'getLatitude' )
               ->will( $this->returnValue( '-0.123' ) );

    $geoEncoder->expects( $this->atLeastOnce() )
               ->method( 'getLongitude' )
               ->will( $this->returnValue( '54.321') );

    $this->object = new LondonImporter( $this->_defaultCategory, $geoEncoder );

    $this->object->setVenueData( $this->_testVenueXml );
    $this->object->setVenueCategoryInformationData( $this->_testVenueCategoryInformationXml );

    $this->object->run( );

    $poi = Doctrine::getTable( 'Poi' )->findOneByPoiName( 'Dummy Name' );

    $this->assertTrue( $poi instanceof Doctrine_Record );

    $this->assertEquals( 'Dummy BuildingNo', $poi[ 'house_no' ]  );
    $this->assertEquals( 'Dummy Address', $poi[ 'street' ] );
    $this->assertEquals( 'Dummy City', $poi[ 'city' ] );
    $this->assertEquals( '', $poi[ 'district' ] );
    $this->assertEquals( 'GBR', $poi[ 'country' ] );
    $this->assertEquals( 'Dummy Address1, Dummy Address2, Dummy Address3, Dummy Address4', $poi[ 'additional_address_details' ] );
    $this->assertEquals( 'w1t 7ab', $poi[ 'zips' ] );
    $this->assertEquals( 'GB', $poi[ 'country_code' ] );
    $this->assertEquals( '', $poi[ 'extension' ] );
    $this->assertEquals( '54.321', $poi[ 'longitude' ] );
    $this->assertEquals( '-0.123', $poi[ 'latitude' ] );
    $this->assertEquals( 'Dummy GenEmail', $poi[ 'email' ] );
    $this->assertEquals( 'Dummy URL', $poi[ 'url' ] );
    $this->assertEquals( 'Dummy Phone', $poi[ 'phone' ] );
    $this->assertEquals( '', $poi[ 'phone2' ] );
    $this->assertEquals( '', $poi[ 'fax' ] );
    $this->assertEquals( '', $poi[ 'vendor_category' ] );
    $this->assertEquals( '', $poi[ 'keywords' ] );
    $this->assertEquals( '', $poi[ 'short_description' ] );
    $this->assertEquals( '', $poi[ 'description' ] );
    $this->assertEquals( 'Dummy BusInfo, Dummy TubeInfo, Dummy TubeStationID, Dummy RailInfo', $poi[ 'public_transport_links' ] );
    $this->assertEquals( 'Dummy CinemaPriceInfo, Dummy MusicPriceInfo', $poi[ 'price_information' ] );
    $this->assertEquals( '7pm', $poi[ 'openingtimes' ] );
    $this->assertEquals( '', $poi[ 'star_rating' ] );
    $this->assertEquals( '', $poi[ 'rating' ] );
    $this->assertEquals( '', $poi[ 'provider' ] );*/
    }

}
