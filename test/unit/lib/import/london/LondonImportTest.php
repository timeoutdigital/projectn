<?php

require_once 'PHPUnit/Extensions/Database/TestCase.php';
require_once dirname( __FILE__ ).'/../../../bootstrap.php';

require_once dirname(__FILE__).'/../../../../../lib/import/london/LondonImport.class.php';
require_once dirname(__FILE__).'/../../../../../lib/import/ImportException.class.php';
require_once dirname(__FILE__).'/../../../../../lib/import/ImportException.class.php';

/**
 * Test class for LondonVenues.
 * Generated by PHPUnit on 2010-01-06 at 15:07:35.
 */
class LondonImportTest extends PHPUnit_Framework_TestCase
{
  /**
   * @var LondonImport
   */
  protected $object;

  /**
   * Sets up the fixture, for example, opens a network connection.
   * This method is called before a test is executed.
   */
  protected function setUp()
  {
    parent::setUp();
    $this->object = new LondonImport;
  }

  /**
   * Tears down the fixture, for example, closes a network connection.
   * This method is called after a test is executed.
   */
  protected function tearDown()
  {
    parent::tearDown();
  }

  /**
   * Checks that results pulled from London Venues table has all required fields
   */
  public function testGetAllHasRequiredFields()
  {
    $this->object->loadFromSource();
    $results = $this->object->getData();

    $this->assertEquals( 20, count( $results ));

    $this->assertArrayHasKey( 'poi_name', $results[ 0 ], 'Source has poi_name field' );
    $this->assertTrue( strlen( $results[ 0 ][ 'poi_name' ] ) > 0, 'Source poi_name is not blank' );

    $this->assertArrayHasKey( 'alternative_name', $results[ 0 ], 'Source has alternative name field' );
    $this->assertTrue( strlen( $results[ 0 ][ 'alternative_name' ] ) > 0, 'Source alternative name is not blank' );

    //should use fixtures for this...
    $this->assertArrayHasKey( 'street', $results[ 0 ], 'Source has street field'  );

    $this->assertArrayHasKey( 'city', $results[ 0 ], 'Source has city field' );
    $this->assertEquals( 'London', $results[ 0 ][ 'city' ], 'Source city field is London' );

    $this->assertArrayHasKey( 'country', $results[ 0 ], 'Source has country field' );
    $this->assertEquals( 'GBR', $results[ 0 ][ 'country' ], 'Source country field is GBR' );

    //is it in spec?
    //$results = $this->object->getAllFromSource();
    //$this->assertArrayHasKey( 'country_code', $results[0] );
    //$this->assertEquals( ??, $results[0]['country_code'] );

    $this->assertArrayHasKey( 'longitude', $results[ 0 ], 'Source has longitude field' );
    $this->assertGreaterThan( -180, $results[ 0 ][ 'longitude' ], 'Source longitude field over -180' );
    $this->assertLessThan( 180, $results[ 0 ][ 'longitude' ], 'Source longitude field less than 180' );

    $this->assertArrayHasKey( 'latitude', $results[ 0 ], 'Source has latitude field' );
    $this->assertGreaterThan( -180, $results[ 0 ][ 'latitude' ], 'Source latitude field over -180' );
    $this->assertLessThan( 180, $results[ 0 ][ 'latitude' ], 'Source latitude field less than 180' );

    //possibility of logic duplication?
    $this->assertArrayHasKey( 'vendor_category_names', $results[ 0 ], 'Source vendor_category field is not empty' );
    $this->assertType( PHPUnit_Framework_Constraint_IsType::TYPE_STRING, $results[0]['vendor_category_names'] );

    $this->assertArrayHasKey( 'vendor_poi_id', $results[ 0 ], 'Source has vendor_poi_id field' );
    //$this->assertType( PHPUnit_Framework_Constraint_IsType::TYPE_INT, $results[0]['vendor_poi_id'] );
    $this->assertNotNull( $results[ 0 ][ 'vendor_poi_id' ], 'Source has vendor_poi_id value' );

    $this->assertArrayHasKey( 'language', $results[ 0 ], 'Source has language field' );
    //$this->assertType( PHPUnit_Framework_Constraint_IsType::TYPE_INT, $results[0]['vendor_poi_id'] );
    $this->assertNotNull( $results[ 0 ][ 'language' ], 'Source has language value' );

    $this->assertArrayHasKey( 'public_transport', $results[ 0 ], 'Source has public_transport field' );

    $this->assertArrayHasKey( 'opening_times', $results[ 0 ], 'Source has opening_times field' );
  }

  /**
   * data should be available after calling loadFromSource()
   */
  public function testLoadFromSourceCreatesData()
  {
    $this->assertNull( $this->object->getData() );
    $this->object->loadFromSource();
    $this->assertTrue( is_array( $this->object->getData() ) );
  }

  /**
   * setData() should throw an ImportException if no data loaded
   */
  public function testBindDataThrowsExceptionIfNoData()
  {
    try
    {
      $this->object->bindData();
      $this->fail();
    }
    catch( ImportException $e ){};
  }

  /**
   * TODO fix sfYamlConfigHandler fail so we can run this test
   * setData() returns true if data is set without problems
   */
  public function testBindDataOk()
  {
    $this->object->loadFromSource();
    $this->assertTrue( is_array( $this->object->getData() ) );
    $this->assertTrue( $this->object->bindData() );
  }

  /**
   * TODO fix sfYamlConfigHandler fail so we can run this test
   */
  public function testBindDataValidationRules()
  {
  }
}
?>
