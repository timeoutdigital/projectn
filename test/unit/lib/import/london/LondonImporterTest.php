<?php
require_once 'PHPUnit/Framework.php';
require_once dirname(__FILE__).'/../../../../../test/bootstrap/unit.php';
require_once dirname( __FILE__ ).'/../../../bootstrap.php';


/**
 * Test class for LondonImporter.
 * Generated by PHPUnit on 2010-01-21 at 15:51:00.
 */
class LondonImporterTest extends PHPUnit_Framework_TestCase
{
  /**
   * @var LondonImporter
   */
  protected $object;

  /**
   * @var SimpleXmlElement
   */
  private $_testVenueXml;

  /**
   * @var SimpleXmlElement
   */
  private $_testVenueCategoryInformationXml;

  /**
   * @var SimpleXmlElement
   */
  private $_testEventXml;

  /**
   * @var PoiCategory
   */
  private $_defaultCategory;

  /**
   * Sets up the fixture, for example, opens a network connection.
   * This method is called before a test is executed.
   */
  protected function setUp()
  {
    ProjectN_Test_Unit_Factory::createSqliteMemoryDb();

    $vendor = new Vendor();
    $vendor->setCity('london');
    $vendor->setLanguage('en-GB');
    $vendor->save();

    $category = new PoiCategory();
    $category['name'] = 'other';
    $category->save();

    $this->_defaultCategory = $category;

    $geoEncoder = $this->getMock('geoEncode', array( 'setAddress', 'getGeoCode', 'getLongitude', 'getLatitude' ) );

    $this->object = new LondonImporter( $category, $geoEncoder );

    $this->_testVenueXml = simplexml_load_file( TO_TEST_DATA_PATH . '/london_listings_venues.xml' );

    $this->_testVenueCategoryInformationXml = simplexml_load_file( TO_TEST_DATA_PATH . '/london_listings_venue_category_information.xml' );
  }

  /**
   * Tears down the fixture, for example, closes a network connection.
   * This method is called after a test is executed.
   */
  protected function tearDown()
  {
    ProjectN_Test_Unit_Factory::destroySqliteMemoryDb();
  }

  /**
   * @todo Implement testRun().
   */
  public function testRun()
  {
  }

  /**
   *
   */
  public function testProcessVenues()
  {
    $geoEncoder = $this->getMock('geoEncode', array( 'setAddress', 'getGeoCode', 'getLongitude', 'getLatitude' ) );

    $geoEncoder->expects( $this->atLeastOnce() )
               ->method( 'setAddress' );

    $geoEncoder->expects( $this->atLeastOnce() )
               ->method( 'getGeoCode' )
               ->will( $this->returnValue( $geoEncoder ) );

    $geoEncoder->expects( $this->atLeastOnce() )
               ->method( 'getLatitude' )
               ->will( $this->returnValue( '-0.123' ) );

    $geoEncoder->expects( $this->atLeastOnce() )
               ->method( 'getLongitude' )
               ->will( $this->returnValue( '54.321') );

    $this->object = new LondonImporter( $this->_defaultCategory, $geoEncoder );
    
    $this->object->setVenueData( $this->_testVenueXml );
    $this->object->setVenueCategoryInformationData( $this->_testVenueCategoryInformationXml );

    $this->object->run( );

    $poi = Doctrine::getTable( 'Poi' )->findOneByPoiName( 'Dummy Name' );

    $this->assertTrue( $poi instanceof Doctrine_Record );

    $this->assertEquals( 'Dummy BuildingNo', $poi[ 'house_no' ]  );
    $this->assertEquals( 'Dummy Address', $poi[ 'street' ] );
    $this->assertEquals( 'Dummy City', $poi[ 'city' ] );
    $this->assertEquals( '', $poi[ 'district' ] );
    $this->assertEquals( 'GBR', $poi[ 'country' ] );
    $this->assertEquals( 'Dummy Address1, Dummy Address2, Dummy Address3, Dummy Address4', $poi[ 'additional_address_details' ] );
    $this->assertEquals( 'w1t 7ab', $poi[ 'zips' ] );
    $this->assertEquals( 'GB', $poi[ 'country_code' ] );
    $this->assertEquals( '', $poi[ 'extension' ] );
    $this->assertEquals( '54.321', $poi[ 'longitude' ] );
    $this->assertEquals( '-0.123', $poi[ 'latitude' ] );
    $this->assertEquals( 'Dummy GenEmail', $poi[ 'email' ] );
    $this->assertEquals( 'Dummy URL', $poi[ 'url' ] );
    $this->assertEquals( 'Dummy Phone', $poi[ 'phone' ] );
    $this->assertEquals( '', $poi[ 'phone2' ] );
    $this->assertEquals( '', $poi[ 'fax' ] );
    $this->assertEquals( '', $poi[ 'vendor_category' ] );
    $this->assertEquals( '', $poi[ 'keywords' ] );
    $this->assertEquals( '', $poi[ 'short_description' ] );
    $this->assertEquals( '', $poi[ 'description' ] );
    $this->assertEquals( 'Dummy BusInfo, Dummy TubeInfo, Dummy TubeStationID, Dummy RailInfo', $poi[ 'public_transport_links' ] );
    $this->assertEquals( 'Dummy CinemaPriceInfo, Dummy MusicPriceInfo', $poi[ 'price_information' ] );
    $this->assertEquals( '7pm', $poi[ 'openingtimes' ] );
    $this->assertEquals( '', $poi[ 'star_rating' ] );
    $this->assertEquals( '', $poi[ 'rating' ] );
    $this->assertEquals( '', $poi[ 'provider' ] );
  }

  /**
   * 
   */
  public function testVenueDataAccess()
  {
    $testXml = new SimpleXMLElement( '<rooty />' );

    $this->object->setVenueData( $testXml );

    $this->assertEquals( $testXml->getName( ), $this->object->getVenueData( )->getName( ) );
  }

  /**
   * 
   */
  public function testEventDataAccess()
  {
    $testXml = new SimpleXMLElement( '<rooty />' );

    $this->object->setEventData( $testXml );

    $this->assertEquals( $testXml->getName( ), $this->object->getEventData( )->getName( ));
  }

}
?>
