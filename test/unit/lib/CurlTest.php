<?php
require_once 'PHPUnit/Framework.php';

require_once dirname(__FILE__).'/../../bootstrap/unit.php';
require_once dirname(__FILE__).'/../bootstrap.php';

/**
 * Test class for Curl.
 * Generated by PHPUnit on 2010-02-10 at 16:09:19.
 */
class CurlTest extends PHPUnit_Framework_TestCase
{
  /**
   * @var Curl
   */
  protected $object;

  /**
   * Sets up the fixture, for example, opens a network connection.
   * This method is called before a test is executed.
   */
  protected function setUp()
  {
    $this->object = new Curl( 'http://www.google.co.uk/search', array( 'q' => 'wave', 'foo' => 'bar' ) );
  }

  /**
   * Tears down the fixture, for example, closes a network connection.
   * This method is called after a test is executed.
   */
  protected function tearDown()
  {
  }

  /**
   * @todo Implement testGetResponse().
   */
  public function testGetResponse()
  {
    $this->assertRegExp('/wave/', $this->object->getResponse() );
  }

  /**
   * @todo Implement testGetParametersString().
   */
  public function testGetParametersString()
  {
    $this->assertEquals('q=wave&foo=bar', $this->object->getParametersString() );
  }


  /**
   * test if a path is successfully created and set
   */
  public function testSetStorePath()
  {
    $testPath = TO_TEST_ROOT_PATH . '/import/ny/images';

    $this->object->setStorePath( $testPath );

    $this->assertFileExists( $testPath );
    $this->assertEquals( $testPath, $this->object->getStorePath() );
  }

  /**
   * tests if the store response is saved successfully as file
   */
  public function testStoreResponse()
  {
      $testFile = TO_TEST_ROOT_PATH . '/import/ny/images/test.txt';

      //clean out the already existing files first
      if ( file_exists( $testFile ) )  unlink( $testFile );

      $this->object->storeResponse( $testFile );

      $this->assertFileExists( $testFile );

      $testFile = 'test2.txt';
      $testPath = TO_TEST_ROOT_PATH . '/import/ny/images';
      $testFullPath = $testPath . '/' . $testFile;

      //clean out the already existing files first
      if ( file_exists( $testFullPath ) )  unlink( $testFullPath );

      $this->object->setStorePath( $testPath );
      $this->object->storeResponse( $testFile );

      $this->assertFileExists( $testFullPath );
  }

}
?>
