<?php

/**
 * This class has been auto-generated by the Doctrine ORM Framework
 */
abstract class PluginSLLOccurrence extends BaseSLLOccurrence
{

    protected function getInherited( $field )
    {
        $value = $this->_get( $field );

        if ( empty( $value ) && $this->hasReference( 'SLLEvent' ) )
        {
        	$value = $this[ 'SLLEvent' ][ $field ];
        }

        return $value;
    }

    protected function setInherited( $field, $value )
    {
        if ( !empty( $value ) &&  $this->hasReference( 'SLLEvent' ) && $this[ 'SLLEvent' ][ $field ] != $value )
        {
            return $this->_set( $field, $value );
        }

        return $this;
    }

    public function getTravel( )
    {
    	$travel = null;

    	if ( $this->hasReference( 'SLLEvent' ) )
    	{
    		$travel = $this[ 'SLLEvent' ][ 'travel' ];
    	}

        if( empty( $travel ) && $this->hasReference( 'SLLVenue' ) )
        {
        	$travel = $this[ 'SLLVenue' ][ 'transport' ];
        }

        return $travel;
    }

    /**
     * If recommended, recommended field == 1
     * Occurrence inherits from Event if the event's recommended
     * field is set
     *
     * @return boolean If this event is recommended
     */
    public function getRecommended( )
    {
    	$value = $this->getInherited( 'recommended' );

        return ( $value == 1 );
    }


    /**
     * If critic's Choice, recommended field == 2
     * Occurrence inherits from Event if the event's recommended
     * field is set
     *
     * @return boolean If this event is recommended
     */
    public function getCriticsChoice( )
    {
        $value = ( $this->_get( 'recommended' ) == 2 );

        if ( $value == false && $this->hasReference( 'SLLEvent' ) && $this[ 'SLLEvent' ][ 'criticsChoice' ] == true )
        {
        	$value = true;
        }

        return $value;
    }


    /**
     * Returns a date if the event has only 1 occurrence
     * Returns a start and end date if the event has many occurrence
     *
     * @return string The formatted date
     */
    public function getFormattedDate( )
    {
        if ( $this[ 'SLLEvent' ][ 'distinct_occurrences' ] == 1 )
        {
            $date = toToolkit::format_event_date( $this[ 'date_start' ] );
        }
        else
        {
            $date = toToolkit::format_event_date( $this[ 'SLLEvent' ][ 'date_start' ], $this[ 'SLLEvent' ][ 'date_end' ] );
        }

        return $date;
    }


    /**
     * @return boolean
     */
    public function getHasLocation( )
    {
        return ( $this[ 'SLLVenue' ][ 'latitude' ] !== null && $this[ 'SLLVenue' ][ 'longitude' ] !== null );
    }


    /**
     * @return SLLEditorial
     */
    public function getReview( )
    {
        return Doctrine::getTable( 'SLLEditorialEventOccurrenceMapping' )->findReview( $this[ 'event_id' ], $this[ 'id' ] );
    }


    /**
     *
     *
     * @return mixed
     */
    public function getCategoryTree( )
    {
        if ( count( $this[ 'SLLEvent' ][ 'SLLEventCategoryMapping' ] ) > 0 )
        {
            $category = $this[ 'SLLEvent' ][ 'SLLEventCategoryMapping' ][ 0 ][ 'SLLCategory' ];

            $tree = $category->getNode( )->getAncestors( );
            $tree->add( $category );

            return $tree;
        }

        return null;
    }


    public function getSlug( )
    {
        return toToolkit::getAlias( $this->get( 'title' ) );
    }


    public function getTitle( )
    {
        return $this->getInherited( 'title' );
    }

    public function setTitle( $title )
    {
        return $this->setInherited( 'title', $title );
    }

    public function getAnnotation( )
    {
        return $this->getInherited( 'annotation' );
    }

    public function setAnnotation( $annotation )
    {
        return $this->setInherited( 'annotation', $annotation );
    }

    public function setImageReference ( $imageId )
    {
        return $this->_set( 'image_id', $imageId );
    }

    public function getImageId()
    {
        if ( $this->_get( 'image_id' ) !== null && $this->_get( 'image_id' ) > 0 )
        {
            return $this->_get( 'image_id' );
        }
        elseif ( $this->hasReference( 'SLLEvent' ) && $this[ 'SLLEvent' ][ 'image_id' ] !== null && $this[ 'SLLEvent' ][ 'image_id' ] > 0 )
        {
            return $this[ 'SLLEvent' ][ 'image_id' ];
        }

        return null;
    }

    public function getVenueCategoryInformation()
    {
        if ( isset( $this->_values[ 'VenueCategoryInformation' ] ) && !$this->isModified( ) ) return $this->_get( 'VenueCategoryInformation' );

        $info = Doctrine_Query::create( )
                              ->select( 'DISTINCT vci.* ' )
                              ->from( 'SLLVenueCategoryInformation vci, SLLOccurrence o, SLLEvent e' )
                              ->where( 'vci.venue_id = o.venue_id AND e.id = o.event_id AND vci.category_id = e.master_category_id' )
                              ->andWhere( 'o.id = ?', $this[ 'id' ] )
                              ->execute( );

        if ( count( $info ) == 0 )
        {
            $info = Doctrine_Query::create( )
                                  ->select( 'DISTINCT vci.* ' )
                                  ->from( 'SLLVenueCategoryInformation vci, SLLOccurrence o, SLLEventCategoryMapping ecp' )
                                  ->where( 'vci.venue_id = o.venue_id AND ecp.event_id = o.event_id AND vci.category_id = ecp.category_id' )
                                  ->andWhere( 'o.id = ?', $this[ 'id' ] )
                                  ->execute( );
        }

        if ( count( $info ) == 0 )
        {
            $info = Doctrine_Query::create( )
                                  ->select( 'DISTINCT vci.* ' )
                                  ->from( 'SLLVenueCategoryInformation vci, SLLOccurrence o, SLLCategory c' )
                                  ->where( 'vci.venue_id = o.venue_id AND vci.category_id = c.id' )
                                  ->andWhere( 'o.id = ?', $this[ 'id' ] )
                                  ->andWhere( 'c.name = ?', 'Around Town' )
                                  ->execute( );
        }

        $this->mapValue( 'VenueCategoryInformation', $info );

        return $info;
    }


    /**
     * gets the occurrence phone number
     *
     * - uses event phone number, then venue category info, then venue
     *
     * @return string, null
     */
    public function getPhone( )
    {
        $phone = null;

        // check for event number
        if ( $this->hasReference( 'SLLEvent' ) && !empty( $this[ 'SLLEvent' ][ 'phone' ] ) )
        {
            $phone = $this[ 'SLLEvent' ][ 'phone' ];
        }
        else
        {
            // load extra venue category info
            $results = $this[ 'venue_category_information' ];

            if ( count( $results ) > 0 )
            {
                // concat the numbers
                foreach ( $results as $result )
                {
                    if ( !empty( $result[ 'telephone_export' ] ) ) $phone .= $result[ 'telephone_export' ] . ', ';
                }

                // trim off last ', '
                $phone = substr( $phone, 0, -2 );
            }
            elseif ( $this->hasReference( 'SLLVenue' ) && !empty( $this[ 'SLLVenue' ][ 'phone' ] ) )
            {
                // use venue number
                $phone = $this[ 'SLLVenue' ][ 'phone' ];
            }
        }

        return $phone;
    }


    public function getFirstPhoneNumber( )
    {
        return toToolkit::extractFirstPhoneNumber( $this[ 'phone' ] );
    }


    public function getPrice( )
    {
        if ( isset( $this->_values[ 'price' ] ) && !$this->isModified( ) ) return $this->_get( 'price' );

        $price = $this->_get( 'price' );

        if ( empty( $price ) )
        {
            if ( $this->hasReference( 'SLLEvent' ) && $this[ 'SLLEvent' ][ 'free' ] )
            {
                $price = 'Free';
            }
            elseif ( $this->hasReference( 'SLLEvent' ) && !empty( $this[ 'SLLEvent' ][ 'price' ] ) )
            {
                $price = $this[ 'SLLEvent' ][ 'price' ];
            }
            else
            {
                // load extra venue category info
                $results = $this[ 'venue_category_information' ];

                if ( count( $results ) > 0 )
                {
                    // concat the numbers
                    foreach ( $results as $result )
                    {
                        if ( !empty( $result[ 'price_export' ] ) ) $price .= $result[ 'price_export' ] . ', ';
                    }

                    // trim off last ', '
                    $price = substr( $price, 0, -2 );
                }
            }
        }

        if ( empty( $price ) ) $price = null;

        $this->mapValue( 'price', $price );

        return $price;
    }


    public function getUrl( )
    {
        if ( isset( $this->_values[ 'url' ] ) && !$this->isModified( ) )
        {
            return $this->_get( 'url' );
        }

        $url = null;

        if ( $this->hasReference( 'SLLEvent' ) )
        {
            $url = $this[ 'SLLEvent' ][ 'url' ];
        }
        else
        {
            // load extra venue category info
            $results = $this[ 'venue_category_information' ];

            if ( count( $results ) > 0 )
            {
                // concat the numbers
                foreach ( $results as $result )
                {
                    if ( !empty( $result[ 'url_export' ] ) ) $url .= $result[ 'url_export' ] . ', ';
                }

                // trim off last ', '
                $url = substr( $url, 0, -2 );
            }
            elseif ( $this->hasReference( 'SLLVenue' ) )
	        {
	            $url = $this[ 'SLLVenue' ][ 'url' ];
	        }
        }


        if ( !empty( $url ) && !preg_match( '/^[^a-z]+$/i', $url ) && preg_match( '|^(https?)\:\/\/.*|i', $url ) == 0 )
        {
            $url = "http://$url";
        }


        $this->mapValue( 'url', $url );

        return $url;
    }



    public function getOpeningTimes( )
    {
        if ( isset( $this->_values[ 'opening_times' ] ) && !$this->isModified( ) )
        {
            return $this->_get( 'opening_times' );
        }

        $times = null;

        if ( $this->hasReference( 'SLLEvent' ) )
        {
            $times = $this[ 'SLLEvent' ][ 'opening_times' ];
        }
        else
        {
            // load extra venue category info
            $results = $this[ 'venue_category_information' ];

            if ( count( $results ) > 0 )
            {
                // concat the numbers
                foreach ( $results as $result )
                {
                    if ( !empty( $result[ 'times_export' ] ) ) $times .= $result[ 'times_export' ] . ', ';
                }

                // trim off last ', '
                $times = substr( $url, 0, -2 );
            }
            elseif ( $this->hasReference( 'SLLVenue' ) )
            {
                $times = $this[ 'SLLVenue' ][ 'opening_times' ];
            }
        }

        $this->mapValue( 'opening_times', $times );

        return $times;
    }



}


