<?php
/**
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class PluginSLLOccurrenceTable extends Doctrine_Table
{

    /**
     * @author Michael Fox
     *
     * Fetch the first occurrence of this event after the supplied date.
     * If no date supplied, use the current date.
     *
     * @param String $date in 'Y-m-d' format.
     * @return SLLOccurrence object with SLLEvent and SLLVenue attached
     */
    public function getNextOccurrence( $eventId, $date = false )
    {
        if ( !$date ) $date = date( 'Y-m-d' );

        $q = $this->createQuery()->select('e.*, o.*, v.*')
                                 ->from( 'SLLOccurrence o' )
                                 ->leftJoin( 'o.SLLEvent e ON o.event_id = e.id' )
                                 ->leftJoin( 'o.SLLVenue v ON o.venue_id = v.id' )
                                 ->where( 'o.event_id = ?', $eventId )
                                 ->andWhere( 'o.date_start >= ?', $date )
                                 ->orderBy('o.date_start ASC')
                                 ->limit( 1 );

        return $q->fetchOne();
    }

    public function getLastOccurrence( $eventId, $date = false )
    {
        $q = $this->createQuery()->select('e.*, o.*, v.*')
                                 ->from( 'SLLOccurrence o' )
                                 ->leftJoin( 'o.SLLEvent e ON o.event_id = e.id' )
                                 ->leftJoin( 'o.SLLVenue v ON o.venue_id = v.id' )
                                 ->where( 'o.event_id = ?', $eventId )
                                 ->orderBy('o.date_start DESC')
                                 ->limit( 1 );

        return $q->fetchOne();
    }



    /**
     * Get occurrence of event from supplied Occurrence Id and event Id.
     *
     * @param int $eventId ID of the event
     * @param int $occurrenceId ID of the occurrence
     * @return SLLOccurrence
     */
    public function getOccurrence( $eventId, $occurrenceId )
    {
        $q = $this->createQuery()->select('e.*, o.*, v.*')
                                 ->from( 'SLLOccurrence o' )
                                 ->leftJoin( 'o.SLLEvent e ON o.event_id = e.id' )
                                 ->leftJoin( 'o.SLLVenue v ON o.venue_id = v.id' )
                                 ->where( 'o.id = ?', $occurrenceId )
                                 ->andWhere( 'o.event_id = ?', $eventId );

        return $q->fetchOne();
    }
}