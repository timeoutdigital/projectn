<?php

/**
 * This class has been auto-generated by the Doctrine ORM Framework
 */
abstract class PluginSLLVenue extends BaseSLLVenue
{

    /**
     * PluginSLL to T adapter
     *
     * @return string
     */
    public function getAka()
    {
        return $this->get( 'alt_name' );
    }

    /**
     * PluginSLL to T adapter
     *
     * @return string
     */
    public function getBuildingNo()
    {
        return null;
    }

    /**
     * PluginSLL to T adapter
     *
     * @return string
     */
    public function getAddress1()
    {
        return $this->get( 'address' );
    }

    /**
     * PluginSLL to T adapter
     *
     * @return string
     */
    public function getAddress2()
    {
        return null;
    }

    /**
     * PluginSLL to T adapter
     *
     * @return string
     */
    public function getAddress3()
    {
        return null;
    }

    /**
     * PluginSLL to T adapter
     *
     * @return string
     */
    public function getCity()
    {
        return 'London';
    }

    /**
     * PluginSLL to T adapter
     *
     * @return string
     */
    public function getCounty()
    {
        return 'London';
    }

    /**
     * PluginSLL to T adapter
     *
     * @return string
     */
    public function getCountry()
    {
        return 'UK';
    }

    /**
     * PluginSLL to T adapter
     *
     * @return string
     */
    public function getArea()
    {
        return null;
    }

    /**
     * PluginSLL to T adapter
     *
     * @return string
     */
    public function getSubarea()
    {
        return null;
    }

    /**
     * PluginSLL to T adapter
     *
     * @return string
     */
    public function getDefaultVenueType()
    {
        return null;
    }

    /**
     * PluginSLL to T adapter
     *
     * @return string
     */
    public function getOpenText()
    {
        return $this->get( 'opening_times' );
    }

    /**
     * PluginSLL to T adapter
     *
     * @return string
     */
    public function getPriceText()
    {
        return $this->get( 'price' );
    }

    /**
     * PluginSLL to T adapter
     *
     * @return string
     */
    public function getTransport()
    {
        return $this->get( 'travel' );
    }

    /**
     * PluginSLL to T adapter
     *
     * @return string
     */
    public function getTelCountryCode()
    {
        return null;
    }

    /**
     * PluginSLL to T adapter
     *
     * @return string
     */
    public function getTelAreaCode()
    {
        return null;
    }

    /**
     * PluginSLL to T adapter
     *
     * @return string
     */
    public function getTelNo()
    {
        return $this->get( 'phone' );
    }

    /**
     * PluginSLL to T adapter
     *
     * @return string
     */
    public function getFaxNo()
    {
        return null;
    }

    /**
     * PluginSLL to T adapter
     *
     * @return string
     */
    public function getImportDate()
    {
        return null;
    }

    /**
     * PluginSLL to T adapter
     *
     * @return string
     */
    public function getCreatedAt()
    {
        return null;
    }

    /**
     * PluginSLL to T adapter
     *
     * @return string
     */
    public function getUpdatedAt()
    {
        return null;
    }

    /**
     * PluginSLL to T adapter
     *
     * @return string
     */
    public function getPageViews()
    {
        return null;
    }

    /**
     * PluginSLL to T adapter
     *
     * @return string
     */
    public function getStatus()
    {
        return ( $this->_get( 'status' ) == 10 ) ? 'live' : 'not_live';
    }

    public function getReviewBody( )
    {
        return $this->get( 'annotation' );
    }

    /**
     * PluginSLL to T adapter
     *
     * @return string
     */
    public function getForeignId()
    {
        return null;
    }



    public function getHasLocation()
    {
        return ( $this[ 'latitude' ] !== null && $this[ 'longitude' ] !== null );
    }


    /**
     * @author Michael Fox
     * Used to assess whether the venue should be hidden in the frontend or not:
     *
     * @return bool
     */
    public function getHidden( )
    {
        /**
         * This may seem like a hack but it makes sense to check whether the venue
         * is the pseudo 'Non-Venue venue' from 4D here as it needs to be hidden
         * on events and venue pages. This venue is a special case, so I think it's
         * justified hard coding the check here.
         */
        return ( $this->status == 'not_live' || $this->name == 'Non-Venue venue' );
    }


    /*
     * depricated
     */
    public function hidden( )
    {
        return $this->getHidden( );
    }


    public function getSlug( )
    {
        return toToolkit::getAlias( $this->get( 'name' ) );
    }

    public function setImageReference( $imageId )
    {
        return $this->set( 'image_id', $imageId );
    }


    public function getFirstPhoneNumber( )
    {
        return toToolkit::extractFirstPhoneNumber( $this[ 'phone' ] );
    }


    public function getVenueCategoryInformation()
    {
        if ( isset( $this->_values[ 'VenueCategoryInformation' ] ) && !$this->isModified( ) ) return $this->_get( 'VenueCategoryInformation' );

        $info = Doctrine_Query::create( )
                              ->select( 'DISTINCT vci.* ' )
                              ->from( 'SLLVenueCategoryInformation vci, SLLOccurrence o, SLLCategory c' )
                              ->where( 'vci.venue_id = o.venue_id AND vci.category_id = c.id' )
                              ->andWhere( 'o.venue_id = ?', $this[ 'id' ] )
                              ->andWhere( 'c.name = ?', 'Around Town' )
                              ->execute( );

        $this->mapValue( 'VenueCategoryInformation', $info );

        return $info;
    }



    public function getPrice( )
    {
        $price = null;

        // load extra venue category info
        $results = $this[ 'venue_category_information' ];

        if ( count( $results ) > 0 )
        {
            // concat the numbers
            foreach ( $results as $result )
            {
                if ( !empty( $result[ 'price_export' ] ) ) $price .= $result[ 'price_export' ] . ', ';
            }

            // trim off last ', '
            $price = substr( $price, 0, -2 );
        }

        return $price;
    }



    public function getPhone( )
    {
        $phone = $this->_get( 'phone' );

        if ( empty( $phone ) )
        {
            // load extra venue category info
            $results = $this[ 'venue_category_information' ];

            if ( count( $results ) > 0 )
            {
                // concat the numbers
                foreach ( $results as $result )
                {
                    if ( !empty( $result[ 'telephone_export' ] ) ) $phone .= $result[ 'telephone_export' ] . ', ';
                }

                // trim off last ', '
                $phone = substr( $phone, 0, -2 );
            }
        }

        return $phone;
    }



    public function getOpeningTimes( )
    {
        $times = $this->_get( 'opening_times' );

        if ( empty( $times ) )
        {
            // load extra venue category info
            $results = $this[ 'venue_category_information' ];

            if ( count( $results ) > 0 )
            {
                // concat the numbers
                foreach ( $results as $result )
                {
                    if ( !empty( $result[ 'times_export' ] ) ) $times .= $result[ 'times_export' ] . ', ';
                }

                // trim off last ', '
                $times = substr( $times, 0, -2 );
            }
        }

        return $times;
    }



    public function getUrl( )
    {
        $url = $this->_get( 'url' );

        if ( empty( $url ) )
        {
            // load extra venue category info
            $results = $this[ 'venue_category_information' ];

            if ( count( $results ) > 0 )
            {
                // concat the numbers
                foreach ( $results as $result )
                {
                    if ( !empty( $result[ 'url_export' ] ) ) $url .= $result[ 'url_export' ] . ', ';
                }

                // trim off last ', '
                $url = substr( $url, 0, -2 );
            }
        }

        if ( !empty( $url ) && preg_match( '|^(https?)\:\/\/.*|i', $url ) == 0 ) $url = "http://$url";

        return $url;
    }



    public function getShortPostcode( )
    {
        $postcode = trim( $this->_get( 'postcode' ) );

        // check the postcode
        if ( empty( $postcode ) ) return null;

        $postcode = explode( ' ', $postcode );

        // check we have some parts
        if ( !is_array( $postcode ) ) return null;

        return $postcode[ 0 ];
    }


}