options:
  type: INNODB
  collate: utf8_unicode_ci
  charset: utf8

#Represents a venue aka Point of interest (Poi)

Poi:
  connection: project_n
  actAs:
    Timestampable:  ~
  columns:
    vendor_poi_id:              {type: string(25), notnull: true}
    review_date:                {type: datetime, notnull: false}
    local_language:             {type: string(10), notnull: false}
    poi_name:                   {type: string(80), notnull: false, minlength: 1 } # @todo should be 'name'
    house_no:                   {type: string(32), notnull: false}
    street:                     {type: string(128), notnull: true}
    city:                       {type: string(32), notnull: true}
    district:                   {type: string(128), notnull: false}
    country:                    {type: string(3), notnull: true, regexp: '/^[a-zA-Z]{3}$/' }
    additional_address_details: {type: string(128), notnull: false}
    zips:                       {type: string(16), notnull: false}
    longitude:                  {type: decimal(18), scale: 15, notnull: true}
    latitude:                   {type: decimal(18), scale: 15, notnull: true}
    email:                      {type: string(128), notnull: false}
    url:                        {type: string(1024), notnull: false}
    phone:                      {type: string(32), notnull: false}
    phone2:                     {type: string(32), notnull: false}
    fax:                        {type: string(32), notnull: false}
    vendor_category:            {type: string(128), notnull: false}
    keywords:                   {type: string(512), notnull: false}
    short_description:          {type: string(2048), notnull: false}
    description:                {type: string(65535),notnull: false}
    public_transport_links:     {type: string(1024), notnull: false}
    price_information:          {type: string(512), notnull: false}
    openingtimes:               {type: string(512), notnull: false} # @todo should be 'opening_times'
    star_rating:                {type: integer(1), notnull: false}
    rating:                     {type: integer(1), notnull: false}
    provider:                   {type: string(512), notnull: false}
    vendor_id:                  {type: integer, notnull: true}
  relations:
    Vendor:                     {local: vendor_id, foreign: id}
    PoiCategories:              {class: PoiCategory, refClass: LinkingPoiCategory, local: poi_id, foreign: poi_category_id }
    VendorPoiCategories:        {class: VendorPoiCategory, refClass: LinkingVendorPoiCategory, local: poi_id, foreign: vendor_poi_category_id }



#Any media that is associated to the poi
PoiMedia:
  connection: project_n
  actAs:
    Timestampable: ~
  columns:
    media_url:                  {type: string(1024), notnull: true}
    mime_type:                  {type: string(255), notnull: true}
    poi_id:                     {type: integer, notnull: true}
  relations:
    Poi:                        {local: poi_id, foreign: id}

#Self referencing table for PoiCategory to enable a tree
PoiCategoryReference:
  connection: project_n
  columns:
    parent_id:
      type: integer
      primary: true
    child_id:
      type: integer
      primary: true

#Poi Category (linking)
LinkingPoiCategory:
  connection: project_n
  columns:
     poi_category_id:         {type: integer, notnull: true}
     poi_id:                  {type: integer, notnull: true}


#Vendor Poi Category (linking)
LinkingVendorPoiCategory:
  connection: project_n
  columns:
     vendor_poi_category_id:  {type: integer, notnull: true}
     poi_id:                  {type: integer, notnull: true}

#VendorPoiCategory
VendorPoiCategory:
  connection: project_n
  columns:
    name:                     {type: string(255), notnull: true}
    vendor_id:                {type: integer, notnull: true}
  relations:
    Vendor:                   {local: vendor_id, foreign: id}
    Poi:                      {class: Poi, refClass: LinkingVendorPoiCategory, local: vendor_poi_category_id, foreign: poi_id}

#Categories available for Pois
PoiCategory:
  connection: project_n
  actAs:
    Timestampable: ~
  columns:
    name:                       {type: string(50), notnull: true}
  relations:
    Poi:                        {class: Poi, refClass: LinkingPoiCategory, local: poi_category_id, foreign: poi_id}
    Parent:                     {class: PoiCategory, local: child_id, foreign: parent_id, refClass: PoiCategoryReference, foreignAlias: Children}
    VendorPoiCategories:        {foreignAlias: PoiCategories, class: VendorPoiCategory, refClass: LinkingPoiCategoryMapping }

#Poi CategoryMapping
LinkingPoiCategoryMapping:
  connection: project_n
  columns:
    poi_category_id:                {type: integer, notnull: true}
    vendor_poi_category_id:         {type: integer, notnull: true}
  relations:
    PoiCategory:                    {foreignAlias: LinkingPoiCategoryMappings}
    VendorPoiCategory:              {foreignAlias: LinkingPoiCategoryMappings}

#Key value pairs for unmappable values on a Poi
PoiProperty:
  connection: project_n
  actAs:
    Timestampable: ~
  columns:
    lookup:                     {type: string(50), notnull: true}
    value:                      {type: string(1024), notnull: true}
    poi_id:                     {type: integer, notnull: true}
  relations:
    Poi:                        {local: poi_id, foreign: id}

#Represents an event
Event:
  connection: project_n
  actAs:
    Timestampable: ~
  columns:
    vendor_event_id:            {type: string(10), notnull: true}
    name:                       {type: string(255), notnull: true}
    short_description:          {type: string(1024), notnull: false}
    description:                {type: string(65535), notnull: false}
    booking_url:                {type: string(1024), notnull: false}
    url:                        {type: string(1024), notnull: false}
    price:                      {type: string(1024), notnull: false}
    rating:                     {type: float, notnull: false}
    vendor_id:                  {type: integer, notnull: true}
  relations:
    Vendor:                     {local: vendor_id, foreign: id}
    EventCategories:            {class: EventCategory, refClass: LinkingEventCategory, local: event_id, foreign: event_category_id }
    VendorEventCategories:      {class: VendorEventCategory, refClass: LinkingVendorEventCategory, local: event_id, foreign: vendor_event_category_id }

#Represents an occurrence of an event
EventOccurrence:
  connection: project_n
  columns:
    vendor_event_occurrence_id: {type: string(50), notnull: true}
    booking_url:                {type: string(1024), notnull: false}
    start:                      {type: datetime, notnull: true}
    end:                        {type: datetime, notnull: false}
    utc_offset:                 {type: string(9), notnull: true}
    event_id:                   {type: integer, notnull: true}
    poi_id:                     {type: integer, notnull: true}
  relations:
    Event:                      {local: event_id, foreign: id, foreignType: many}
    Poi:                        {local: poi_id, foreign: id, foreignType: many}

#VendorEvent Category
VendorEventCategory:
  connection: project_n
  columns:
    name:                       {type: string(255), notnull: true}
    vendor_id:                  {type: integer, notnull: true}
  relations:
    Vendor:                     {local: vendor_id, foreign: id}
    Events:                     {class: Event, refClass: LinkingVendorEventCategory, local: vendor_event_category_id, foreign: event_id}


#Event Category
EventCategory:
  connection: project_n
  columns:
    name:                       {type: string(50), notnull: true}
  relations:
    Events:                     {class: Event, refClass: LinkingEventCategory, local: event_category_id, foreign: event_id}
    VendorEventCategories:      {foreignAlias: EventCategories, class: VendorEventCategory, refClass: LinkingEventCategoryMapping }


#LinkingEvent CategoryMapping
LinkingEventCategoryMapping:
  connection: project_n
  columns:
    event_category_id:          {type: integer, notnull: true}
    vendor_event_category_id:   {type: integer, notnull: true}
  relations:
    VendorEventCategory:        {foreignAlias: LinkingEventCategoryMappings}
    EventCategory:              {foreignAlias: LinkingEventCategoryMappings}

#Vendor Event Category (linking)
LinkingVendorEventCategory:
  connection: project_n
  columns:
     vendor_event_category_id:  {type: integer, notnull: true}
     event_id:                  {type: integer, notnull: true}

#Event Category (linking)
LinkingEventCategory:
  connection: project_n
  columns:
     event_category_id:         {type: integer, notnull: true}
     event_id:                  {type: integer, notnull: true}

#Any media that is associated to a Event
EventMedia:
  connection: project_n
  actAs:
    Timestampable: ~
  columns:
    media_url:                  {type: string(1024), notnull: true}
    mime_type:                  {type: string(255), notnull: true}
    event_id:                   {type: integer, notnull: true}
  relations:
    Event:                      {local: event_id, foreign: id}

#Key value pairs for unmappable values on the Poi
EventProperty:
  connection: project_n
  actAs:
    Timestampable: ~
  columns:
    lookup:                     {type: string(50), notnull: true}
    value:                      {type: string(1024), notnull: true}
    event_id:                   {type: integer, notnull: true}
  relations:
    Event:                      {local: event_id, foreign: id, foreignType: many}

#Represents a movie
Movie:
  connection: project_n
  actAs:
    Timestampable:              ~
  columns:
    id:                         {type: integer, notnull: true,  autoincrement: true, primary: true }
    vendor_id:                  {type: integer, notnull: true}
    vendor_movie_id:            {type: string(25), notnull: true}
    name:                       {type: string(255), notnull: true}
    plot:                       {type: string(65535), notnull: false}
    review:                     {type: string(65535), notnull: false}
    url:                        {type: string(1024), notnull: false}
    rating:                     {type: float, notnull: false}
    age_rating:                 {type: string(32), notnull: false}
    utf_offset:                 {type: string(9), notnull: true}
    poi_id:                     {type: integer, notnull: false}
  relations:
    Vendor:                     {local: vendor_id, foreign: id}
    MovieGenres:                {class: MovieGenre, refClass: LinkingMovieGenre, local: movie_id, foreign: movie_genre_id }
    Poi:                        {local: poi_id, foreign: id, foreignType: one}


#Movie Genres
LinkingMovieGenre:
  connection: project_n
  columns:
     movie_genre_id:          {type: integer, notnull: true}
     movie_id:                {type: integer, notnull: true}


#Movie Genres
MovieGenre:
  connection: project_n
  actAs:
    Timestampable:              ~
  columns:
    genre:                      {type: string(255), notnull: true}
  relations:
    Movies:                      {class: Movie, refClass: LinkingMovieGenre, local: movie_genre_id, foreign: movie_id}
   

#Any media that is associated to a Movie
MovieMedia:
  connection: project_n
  actAs:
    Timestampable: ~
  columns:
    media_url:                  {type: string(1024), notnull: true}
    mime_type:                  {type: string(255), notnull: true}
    movie_id:                   {type: integer, notnull: true}
  relations:
    Movie:                      {local: movie_id, foreign: id}

#Key value pairs for unmappable values on a Movie
MovieProperty:
  connection: project_n
  actAs:
    Timestampable: ~
  columns:
    id:                         {type: integer, autoincrement: true, primary: true}
    lookup:                     {type: string(50), notnull: true}
    value:                      {type: string(1024), notnull: true}
    movie_id:                   {type: integer, notnull: true}
  relations:
    Movie:                      {local: movie_id, foreign: id, foreignType: many}

#Rating that the user gives to the poi
UserContent:
  connection: project_n
  actAs:
    Timestampable: ~
  columns:
    vendor_ucid:                {type: string(32), notnull: true}
    comment_subject:            {type: string(512), notnull: true}
    comment_body:               {type: string(65535), notnull: true}
    user_rating:                {type: float, notnull: false}
    user_id:                    {type: integer, notnull: true}
    poi_id:                     {type: integer, notnull: true}
  relations:
     User:                      {onDelete: CASCADE, local: user_id, foreign: id, foreignAlias: Users}
     Poi:                       {onDelete: CASCADE, local: poi_id, foreign: id, foreignAlias: Poi}

#The individual user who is comments against a poi
User:
  connection: project_n
  actAs:
    Timestampable: ~
  columns:
    vendor_id:                  {type: integer, notnull: true}
    user_name:                  {type: string(32), notnull: true}
    user_reputation:            {type: integer(1), notnull: false}
    user_infomation:            {type: string, notnull: true}
    comments_relevance:         {type: float, notnull: false}
    specialty:                  {type: string(128), notnull: false}
  relations:
    Vendor:                     {local: vendor_id, foreign: id}

#Vendor
Vendor:
  connection: project_n
  actAs:
    Timestampable: ~
  columns:
    city:                       {type: string(15), notnull: true}
    language:                   {type: string(10), notnull: true} # @todo should be ISO 3166-2 (i.e. two char code GB)
    time_zone:                  {type: string(50), notnull: true}
    inernational_dial_code:     {type: string(3)}


#Import stats
ImportLogger:
  connection: project_n
  actAs:
    Timestampable:              ~
  columns:
    total_inserts:              {type: integer, notnull: true}
    total_updates:              {type: integer, notnull: true}
    total_errors:               {type: integer, notnull: true}
    total_existing:             {type: integer, notnull: true}
    vendor_id:                  {type: integer, notnull: true}
    type:                       {type: enum, values: [movie, poi, event], notnull: true}
    total_time:                 {type: time, notnull: true}
  relations:
    Vendor:                     {local: vendor_id, foreign: id}


#Log all changes during an import i.e. updated poi content
ImportLoggerChange:
  connection: project_n
  actAs:
    Timestampable:              ~
  columns:
    type:                       {type: enum, values: [update, delete], notnull: true}
    log:                        {type: string, notnull: true}
    import_logger_id:           {type: integer, notnull: true}
  relations:
    ImportLogger:                {local: import_logger_id, foreign: id, foreignAlias: ImportLoggerChanges}

 #Logg All import issues
ImportLoggerError:
  connection: project_n
  actAs:
    Timestampable:              ~
  columns:
    trace:                      {type: string, notnull: true}
    log:                        {type: string, notnull: true}
    type:                       {type: string, notnull: true}
    message:                    {type: string, notnull: true}
    serialized_object:          {type: string, notnull: true}
    import_logger_id:           {type: integer, notnull: true}
    resolved:                   {type: boolean, notnull: true, default: 0}
  relations:
    ImportLogger:                {local: import_logger_id, foreign: id, foreignAlias: ImportLoggerErrors}
    
