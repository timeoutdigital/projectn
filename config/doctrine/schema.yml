options:
  type: INNODB
  collate: utf8_unicode_ci
  charset: utf8

#Represents a venue aka Point of interest (Poi)
Poi:
  connection: project_n
  actAs:
    Timestampable:  ~
  columns:
    vendor_poi_id:              {type: string(25), notnull: true}
    review_date:                {type: datetime, notnull: false}
    local_language:             {type: string(10), notnull: false}
    poi_name:                   {type: string(80), notnull: true, minlength: 1 } # @todo should be 'name'
    house_no:                   {type: string(32), notnull: false}
    street:                     {type: string(255), notnull: false}
    city:                       {type: string(32), notnull: true, minlength: 1}
    district:                   {type: string(128), notnull: false}
    country:                    {type: string(3), notnull: true, regexp: '/^[a-zA-Z]{3}$/' }
    additional_address_details: {type: string(1024), notnull: false}
    zips:                       {type: string(16), notnull: false}
    longitude:                  {type: decimal(11), scale: 8, notnull: false}
    latitude:                   {type: decimal(11), scale: 8, notnull: false}
    email:                      {type: string(128), notnull: false}
    url:                        {type: string(1024), notnull: false}
    phone:                      {type: string(32), notnull: false}
    phone2:                     {type: string(32), notnull: false}
    fax:                        {type: string(32), notnull: false}
    vendor_category:            {type: string(128), notnull: false}
    keywords:                   {type: string(512), notnull: false}
    short_description:          {type: string(2048), notnull: false}
    description:                {type: string(65535),notnull: false}
    public_transport_links:     {type: string(1024), notnull: false}
    price_information:          {type: string(512), notnull: false}
    openingtimes:               {type: string(512), notnull: false} # @todo should be 'opening_times'
    star_rating:                {type: integer(1), notnull: false}
    rating:                     {type: integer(1), notnull: false}
    provider:                   {type: string(512), notnull: false}
    geocode_look_up:            {type: string(512), notnull: true}
    vendor_id:                  {type: integer, notnull: true}
  relations:
    Vendor:                     {local: vendor_id, foreign: id}
    PoiCategory:                {class: PoiCategory, refClass: LinkingPoiCategory, local: poi_id, foreign: poi_category_id }
    VendorPoiCategory:          {class: VendorPoiCategory, refClass: LinkingVendorPoiCategory, local: poi_id, foreign: vendor_poi_category_id }
  indexes:
    vendor_poi_id_index:        {fields: [vendor_poi_id]}

#Any media that is associated to a Poi
PoiMedia:
  connection: project_n
  inheritance:
    extends: Media
  columns:
    poi_id:                     {type: integer, notnull: true}
  relations:
    Poi:                        {local: poi_id, foreign: id}

#Category available for Pois
PoiCategory:
  connection: project_n
  actAs:
    Timestampable: ~
  columns:
    name:                       {type: string(50), notnull: true}
  relations:
    Poi:                        {class: Poi, refClass: LinkingPoiCategory}
    Parent:                     {class: PoiCategory, local: child_id, foreign: parent_id, refClass: PoiCategoryReference, foreignAlias: Children}
    VendorPoiCategory:          {class: VendorPoiCategory, refClass: LinkingPoiCategoryMapping }
  indexes:
    name_index:                 {fields: [name]}

#Self referencing table for PoiCategory to enable a tree
PoiCategoryReference:
  connection: project_n
  columns:
    parent_id:
      type: integer
      primary: true
    child_id:
      type: integer
      primary: true

#VendorPoiCategory
VendorPoiCategory:
  connection: project_n
  columns:
    name:                     {type: string(255), notnull: true}
    vendor_id:                {type: integer, notnull: true}
  relations:
    Vendor:                   {local: vendor_id, foreign: id}
    Poi:                      {class: Poi, refClass: LinkingVendorPoiCategory}
    PoiCategory:              {class: PoiCategory, refClass: LinkingPoiCategoryMapping}
  indexes:
    name_index:               {fields: [name]}

#Poi Category (linking)
LinkingPoiCategory:
  connection: project_n
  columns:
     poi_category_id:         {type: integer, notnull: true}
     poi_id:                  {type: integer, notnull: true}

#Vendor Poi Category (linking)
LinkingVendorPoiCategory:
  connection: project_n
  columns:
     vendor_poi_category_id:  {type: integer, notnull: true}
     poi_id:                  {type: integer, notnull: true}

#Poi CategoryMapping
LinkingPoiCategoryMapping:
  connection: project_n
  columns:
    poi_category_id:          {type: integer, notnull: true}
    vendor_poi_category_id:   {type: integer, notnull: true}

#Key value pairs for unmappable values on a Poi
PoiProperty:
  connection: project_n
  actAs:
    Timestampable: ~
  columns:
    lookup:                   {type: string(50), notnull: true}
    value:                    {type: string(1024), notnull: true}
    poi_id:                   {type: integer, notnull: true}
  relations:
    Poi:                      {local: poi_id, foreign: id}
  indexes:
    lookup_index:             {fields: [lookup]}

#Represents an event
Event:
  connection: project_n
  actAs:
    Timestampable: ~
  columns:
    review_date:                {type: datetime, notnull: false}
    vendor_event_id:            {type: string(10), notnull: true}
    name:                       {type: string(255), notnull: true}
    short_description:          {type: string(1024), notnull: false}
    description:                {type: string(65535), notnull: false}
    booking_url:                {type: string(1024), notnull: false}
    url:                        {type: string(1024), notnull: false}
    price:                      {type: string(1024), notnull: false}
    rating:                     {type: float, notnull: false}
    vendor_id:                  {type: integer, notnull: true}
  relations:
    Vendor:                     {local: vendor_id, foreign: id}
    EventCategory:              {class: EventCategory, refClass: LinkingEventCategory, local: event_id, foreign: event_category_id }
    VendorEventCategory:        {class: VendorEventCategory, refClass: LinkingVendorEventCategory, local: event_id, foreign: vendor_event_category_id }
  indexes:
    vendor_event_id_index:      {fields: [vendor_event_id]}

#Represents an occurrence of an event
EventOccurrence:
  connection: project_n
  columns:
    vendor_event_occurrence_id: {type: string(50), notnull: true}
    booking_url:                {type: string(1024), notnull: false}
    start_date:                 {type: date, notnull: true}
    start_time:                 {type: time, notnull: false}
    end_date:                   {type: date, notnull: false}
    end_time:                   {type: time, notnull: false}
    utc_offset:                 {type: string(9), notnull: true}
    event_id:                   {type: integer, notnull: true}
    poi_id:                     {type: integer, notnull: true}
  relations:
    Event:                      {local: event_id, foreign: id, foreignType: many}
    Poi:                        {local: poi_id, foreign: id, foreignType: many}
  indexes:
    vendor_event_occurrence_id_index:      {fields: [vendor_event_occurrence_id]}

#Event Category
EventCategory:
  connection: project_n
  columns:
    name:                       {type: string(50), notnull: true}
  relations:
    Event:                      {class: Event, refClass: LinkingEventCategory}
    VendorEventCategory:        {class: VendorEventCategory, refClass: LinkingEventCategoryMapping}
  indexes:
    name_index:                 {fields: [name]}

#VendorEvent Category
VendorEventCategory:
  connection: project_n
  columns:
    name:                       {type: string(255), notnull: true}
    vendor_id:                  {type: integer, notnull: true}
  relations:
    Vendor:                     {local: vendor_id, foreign: id}
    Event:                      {class: Event, refClass: LinkingVendorEventCategory}
    EventCategory:              {class: EventCategory, refClass: LinkingEventCategoryMapping}
  indexes:
    name_index:                 {fields: [name]}

#Event Category (linking)
LinkingEventCategory:
  connection: project_n
  columns:
     event_category_id:         {type: integer, notnull: true}
     event_id:                  {type: integer, notnull: true}

#Vendor Event Category (linking)
LinkingVendorEventCategory:
  connection: project_n
  columns:
     vendor_event_category_id:  {type: integer, notnull: true}
     event_id:                  {type: integer, notnull: true}

#LinkingEvent CategoryMapping
LinkingEventCategoryMapping:
  connection: project_n
  columns:
    event_category_id:          {type: integer, notnull: true}
    vendor_event_category_id:   {type: integer, notnull: true}

#Any media that is associated to a Event
EventMedia:
  connection: project_n
  inheritance:
    extends: Media
  columns:
    event_id:                   {type: integer, notnull: true}
  relations:
    Event:                      {local: event_id, foreign: id}

#Key value pairs for unmappable values on the Poi
EventProperty:
  connection: project_n
  actAs:
    Timestampable: ~
  columns:
    lookup:                     {type: string(50), notnull: true}
    value:                      {type: string(1024), notnull: true}
    event_id:                   {type: integer, notnull: true}
  relations:
    Event:                      {local: event_id, foreign: id, foreignType: many}
  indexes:
    lookup_index:               {fields: [lookup]}

#Represents a movie
Movie:
  connection: project_n
  actAs:
    Timestampable:              ~
  columns:
    id:                         {type: integer, notnull: true,  autoincrement: true, primary: true }
    vendor_id:                  {type: integer, notnull: true}
    vendor_movie_id:            {type: string(25), notnull: true}
    name:                       {type: string(255), notnull: true}
    plot:                       {type: string(65535), notnull: false}
    tag_line:                   {type: string(65535), notnull: false}
    review:                     {type: string(65535), notnull: false}
    url:                        {type: string(1024), notnull: false}
    director:                   {type: string(255), notnull: false}
    writer:                     {type: string(255), notnull: false}
    cast:                       {type: string(255), notnull: false}
    #cast:                       {type: array(1024), notnull: false} # $cast = array( array( 'actor-name' => 'Mia Wasikowska', 'character-name' => 'Alice', 'picture' => 'http://...' ) )
    age_rating:                 {type: string(50), notnull: false}
    release_date:               {type: date, notnull: false}
    duration:                   {type: string(50), notnull: false}
    country:                    {type: string(50), notnull: false}
    language:                   {type: string(50), notnull: false}
    aspect_ratio:               {type: string(50), notnull: false}
    sound_mix:                  {type: string(50), notnull: false}
    company:                    {type: string(50), notnull: false}
    rating:                     {type: decimal, scale: 1, notnull: false}
    utf_offset:                 {type: string(9), notnull: true}
    imdb_id:                    {type: varchar(10), notnull: false}
  relations:
    Vendor:                     {local: vendor_id, foreign: id}
    MovieGenres:                {class: MovieGenre, refClass: LinkingMovieGenre, local: movie_id, foreign: movie_genre_id }
  indexes:
    vendor_movie_id_index:      {fields: [vendor_movie_id]}


#Movie Genres
LinkingMovieGenre:
  connection: project_n
  columns:
     movie_genre_id:          {type: integer, notnull: true}
     movie_id:                {type: integer, notnull: true}


#Movie Genres
MovieGenre:
  connection: project_n
  actAs:
    Timestampable:              ~
  columns:
    genre:                      {type: string(255), notnull: true}
  relations:
    Movies:                     {class: Movie, refClass: LinkingMovieGenre, local: movie_genre_id, foreign: movie_id}
  indexes:
    genre_index:                {fields: [genre]}

#Any media that is associated to a Movie
MovieMedia:
  connection: project_n
  inheritance:
    extends: Media
  columns:
    movie_id:                   {type: integer, notnull: true}
  relations:
    Movie:                      {local: movie_id, foreign: id}

#Key value pairs for unmappable values on a Movie
MovieProperty:
  connection: project_n
  actAs:
    Timestampable: ~
  columns:
    id:                         {type: integer, autoincrement: true, primary: true}
    lookup:                     {type: string(50), notnull: true}
    value:                      {type: string(1024), notnull: true}
    movie_id:                   {type: integer, notnull: true}
  relations:
    Movie:                      {local: movie_id, foreign: id, foreignType: many}
  indexes:
    lookup_index:               {fields: [lookup]}

#Rating that the user gives to the poi
UserContent:
  connection: project_n
  actAs:
    Timestampable: ~
  columns:
    vendor_ucid:                {type: string(32), notnull: true}
    comment_subject:            {type: string(512), notnull: true}
    comment_body:               {type: string(65535), notnull: true}
    user_rating:                {type: float, notnull: false}
    user_id:                    {type: integer, notnull: true}
    poi_id:                     {type: integer, notnull: true}
  relations:
     User:                      {onDelete: CASCADE, local: user_id, foreign: id, foreignAlias: Users}
     Poi:                       {onDelete: CASCADE, local: poi_id, foreign: id, foreignAlias: Poi}

#The individual user who is comments against a poi
User:
  connection: project_n
  actAs:
    Timestampable: ~
  columns:
    vendor_id:                  {type: integer, notnull: true}
    user_name:                  {type: string(32), notnull: true}
    user_reputation:            {type: integer(1), notnull: false}
    user_infomation:            {type: string, notnull: true}
    comments_relevance:         {type: float, notnull: false}
    specialty:                  {type: string(128), notnull: false}
  relations:
    Vendor:                     {local: vendor_id, foreign: id}

#Vendor
Vendor:
  connection: project_n
  actAs:
    Timestampable: ~
  columns:
    city:                       {type: string(50), notnull: true}
    language:                   {type: string(10), notnull: true} # @todo should be ISO 3166-2 (i.e. two char code GB)
    time_zone:                  {type: string(50), notnull: true}
    inernational_dial_code:     {type: string(10)}
    airport_code:               {type: string(3), notnull: true}
    country_code:               {type: string(2), notnull: true}
    country_code_long:          {type: string(3), notnull: true}
    geo_boundries:              {type: string(255), notnull: true}
  indexes:
    city_index:                 {fields: [city]}
    city_language_index:        {fields: [city, language]}








Log:
  connection: project_n
  actAs:
    Timestampable:              ~
  columns:
    vendor_id:                  {type: integer, notnull: false}
    status:                     {type: enum, values: [running, failed, success], notnull: true}
    total_time:                 {type: time, notnull: true}
  relations:
    Vendor:                     {local: vendor_id, foreign: id}
  indexes:
    status_index:               {fields: [status]}

LogImport:
  connection: project_n
  inheritance:
    extends: Log
    type: concrete

LogExport:
  connection: project_n
  inheritance:
    extends: Log
    type: concrete

#Record Record ID and Export Date
LogExportDate:
  connection: project_n
  columns:
    record_id:                  {type: integer, notnull: true}
    vendor_id:                  {type: integer, notnull: true}
    model:                      {type: string(10), notnull: true}
    export_date:                {type: datetime, notnull: true}


LogCount:
  connection: project_n
  actAs:
    Timestampable:              ~
  columns:
    model:                      {type: string(50), notnull: true}
    count:                      {type: integer, notnull: true}
  indexes:
    model_index:                {fields: [model]}

LogImportCount:
  connection: project_n
  inheritance:
    extends: LogCount
    type: concrete
  columns:
    log_import_id:            {type: integer, notnull: true}
    operation:                {type: enum, values: [updated, insert, existing, failed, delete], notnull: true}
  relations:
    LogImport:                {local: log_import_id, foreign: id}
  indexes:
    operation_index:          {fields: [operation]}

LogExportCount:
  connection: project_n
  inheritance:
    extends: LogCount
    type: concrete
  columns:
    log_export_id:            {type: integer, notnull: true}
  relations:
    LogExport:                {local: log_export_id, foreign: id}

LogImportChange:
  connection: project_n
  actAs:
    Timestampable:              ~
  columns:
    model:                      {type: string(50), notnull: true}
    record_id:                  {type: integer, notnull: true}
    log:                        {type: string, notnull: true}
    log_import_id:              {type: integer, notnull: true}
  relations:
    LogImport:                  {local: log_import_id, foreign: id}
  indexes:
    model_index:                {fields: [model]}


LogImportError:
  connection: project_n
  actAs:
    Timestampable:              ~
  columns:
    model:                      {type: string(50), notnull: false}
    exception_class:            {type: string(255), notnull: true}
    trace:                      {type: string, notnull: true}
    message:                    {type: string, notnull: true}
    log:                        {type: string, notnull: true}
    serialized_object:          {type: string, notnull: false}
    resolved:                   {type: boolean, notnull: true, default: 0}
    log_import_id:              {type: integer, notnull: true}
  relations:
    LogImport:                  {local: log_import_id, foreign: id}
  indexes:
    model_index:                {fields: [model]}
    exception_class_index:      {fields: [exception_class]}
    resolved_index:             {fields: [resolved]}

LogExportError:
  connection: project_n
  actAs:
    Timestampable:              ~
  columns:
    record_id:                  {type: integer, notnull: false}
    model:                      {type: string(50), notnull: false}
    log:                        {type: string, notnull: true}
    log_export_id:              {type: integer, notnull: true}
  relations:
    LogExport:                  {local: log_export_id, foreign: id}
  indexes:
    record_id_index:            {fields: [record_id]}
    model_index:                {fields: [model]}


#Master Media table, extended by PoiMedia, EventMedia and MovieMedia
Media:
  connection: project_n
  actAs:
    Timestampable: ~
  columns:
    ident:                {type: string(40), notnull: true, unique:true}
    url:                  {type: string(1024), notnull: true}
    mime_type:            {type: string(255), notnull: false}
    file_last_modified:   {type: string(255), notnull: false}
    etag:                 {type: string(255), notnull: false}
    content_length:       {type: integer, notnull: false}
    status:               {type: enum, notnull: true, values: [new, valid, error, dead], default: 'new'}
    last_header_check:    {type: datetime, notnull: false}
  indexes:
    ident_index:          {fields: [ident]}
    status_index:         {fields: [status]}


RecordFieldOverride:
  connection: project_n
  actAs:
    Timestampable:              ~
  columns:
    record_id:                  {type: integer,    notnull: true}
    field:                      {type: string(50), notnull: true}
    received_value:             {type: string,     notnull: false}
    edited_value:               {type: string,     notnull: false}
    is_active:                  {type: boolean,    notnull: true, default: false}

RecordFieldOverridePoi:
  connection: project_n
  inheritance:
    extends: RecordFieldOverride
    type: concrete
  relations:
    Poi:   {local: record_id, foreign: id, foreignType: many, foreignAlias: RecordFieldOverride}

RecordFieldOverrideEvent:
  connection: project_n
  inheritance:
    extends: RecordFieldOverride
    type: concrete
  relations:
    Event:   {local: record_id, foreign: id, foreignType: many, foreignAlias: RecordFieldOverride}

RecordFieldOverrideMovie:
  connection: project_n
  inheritance:
    extends: RecordFieldOverride
    type: concrete
  relations:
    Movie:   {local: record_id, foreign: id, foreignType: many, foreignAlias: RecordFieldOverride}

Meta:
  connection: project_n
  actAs:
    Timestampable:  ~
  columns:
    record_id:                {type: integer, notnull: true}
    lookup:                   {type: string, notnull: true}
    value:                    {type: string, notnull: false}
    comment:                  {type: string, notnull: false}
  indexes:
    record_id_index:          {fields: [record_id]}

PoiMeta:
  connection: project_n
  inheritance:
    extends: Meta
    type: concrete
  relations:
    Poi:                      {local: record_id, foreign: id}

EventMeta:
  connection: project_n
  inheritance:
    extends: Meta
    type: concrete
  relations:
    Event:                    {local: record_id, foreign: id}

MovieMeta:
  connection: project_n
  inheritance:
    extends: Meta
    type: concrete
  relations:
    Movie:                    {local: record_id, foreign: id}

#Ui Category
UiCategory:
  connection: project_n
  columns:
    name:                       {type: string(50), notnull: true}
  relations:
    VendorPoiCategory:          { class: VendorPoiCategory, refClass: LinkingVendorPoiCategoryUiCategory, foreignAlias: UiCategory, local: ui_category_id, foreign: vendor_poi_category_id }
    VendorEventCategory:        { class: VendorEventCategory, refClass: LinkingVendorEventCategoryUiCategory, foreignAlias: UiCategory, local: ui_category_id, foreign: vendor_event_category_id }
  indexes:
    name_index:                 {fields: [name]}

#Poi Ui Category (linking)
LinkingVendorPoiCategoryUiCategory:
  connection: project_n
  columns:
    vendor_poi_category_id:     {type: integer, notnull: true}
    ui_category_id:             {type: integer, notnull: true}

#Event Ui Category (linking)
LinkingVendorEventCategoryUiCategory:
  connection: project_n
  columns:
    vendor_event_category_id:   {type: integer, notnull: true}
    ui_category_id:             {type: integer, notnull: true}